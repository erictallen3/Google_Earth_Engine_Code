//// Define study area
var Cimarron = ee.FeatureCollection(table)
    .filter("COUNTY_NAM == 'CIMARRON'")
    .geometry();
Map.addLayer(Cimarron)
Map.centerObject(Cimarron);


////--------------------------------------------------Extract GPP data from grasslands (2005)
var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2005
var cdl2005 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-01-01', '2006-12-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2005') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass05 = cdl2005.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass05geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass05geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass05win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2005-01-01', '2005-04-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

var gppGrass05spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2005-04-01', '2005-07-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

var gppGrass05sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2005-07-01', '2005-10-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

var gppGrass05fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2005-10-01', '2006-01-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

//Select GPP from dataset
var grass05gppWin = gppGrass05win.select('GPP')
var grass05gppSpr = gppGrass05spr.select('GPP')
var grass05gppSum = gppGrass05sum.select('GPP')
var grass05gppFal = gppGrass05fal.select('GPP')
//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP05medWin = grass05gppWin.median();
Map.addLayer(grassGPP05medWin, gppVis, 'grassGPP05medWin');

var grassGPP05medSpr = grass05gppSpr.median();
Map.addLayer(grassGPP05medSpr, gppVis, 'grassGPP05medSpr');

var grassGPP05medSum = grass05gppSum.median();
Map.addLayer(grassGPP05medSum, gppVis, 'grassGPP05medSum');

var grassGPP05medFal = grass05gppFal.median();
Map.addLayer(grassGPP05medFal, gppVis, 'grassGPP05medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2005_medValWin = grassGPP05medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2005_medValWin,'grassGPP_2005_medValWin');

var grassGPP_2005_medValSpr = grassGPP05medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2005_medValSpr,'grassGPP_2005_medValSpr');

var grassGPP_2005_medValSum = grassGPP05medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2005_medValSum,'grassGPP_2005_medValSum');

var grassGPP_2005_medValFal = grassGPP05medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2005_medValFal,'grassGPP_2005_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2005
var GPPgrass05medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass05win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass05gpp',  //property of ROI to display in map
})
print(GPPgrass05medWin,'GPPgrass05medWin' )

var GPPgrass05medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass05spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass05gpp',  //property of ROI to display in map
})
print(GPPgrass05medSpr,'GPPgrass05medSpr' )

var GPPgrass05medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass05sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass05gpp',  //property of ROI to display in map
})
print(GPPgrass05medSum,'GPPgrass05medSum' )

var GPPgrass05medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass05fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass05gpp',  //property of ROI to display in map
})
print(GPPgrass05medFal,'GPPgrass05medFal' )

////------------------------------------------Export images
Export.image.toDrive({
  image: grassGPP05medWin,
  description: 'grassGPP05medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP05medSpr,
  description: 'grassGPP05medSpr',
  scale: 30,
  region:Cimarron,

});

Export.image.toDrive({
  image: grassGPP05medSum,
  description: 'grassGPP05medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP05medFal,
  description: 'grassGPP05medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2006)
var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2006
var cdl2006 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-01-01', '2006-12-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2006') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass06 = cdl2006.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass06geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass06geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass06win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2006-01-01', '2006-04-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

var gppGrass06spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2006-04-01', '2006-07-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

var gppGrass06sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2006-07-01', '2006-10-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

var gppGrass06fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2006-10-01', '2007-01-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

//Select GPP from dataset
var grass06gppWin = gppGrass06win.select('GPP')
var grass06gppSpr = gppGrass06spr.select('GPP')
var grass06gppSum = gppGrass06sum.select('GPP')
var grass06gppFal = gppGrass06fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP06medWin = grass06gppWin.median();
Map.addLayer(grassGPP06medWin, gppVis, 'grassGPP06medWin');

var grassGPP06medSpr = grass06gppSpr.median();
Map.addLayer(grassGPP06medSpr, gppVis, 'grassGPP06medSpr');

var grassGPP06medSum = grass06gppSum.median();
Map.addLayer(grassGPP06medSum, gppVis, 'grassGPP06medSum');

var grassGPP06medFal = grass06gppFal.median();
Map.addLayer(grassGPP06medFal, gppVis, 'grassGPP06medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2006_medValWin = grassGPP06medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2006_medValWin,'grassGPP_2006_medValWin');

var grassGPP_2006_medValSpr = grassGPP06medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2006_medValSpr,'grassGPP_2006_medValSpr');

var grassGPP_2006_medValSum = grassGPP06medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2006_medValSum,'grassGPP_2006_medValSum');

var grassGPP_2006_medValFal = grassGPP06medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2006_medValFal,'grassGPP_2006_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2006
var GPPgrass06medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass06win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass06gpp',  //property of ROI to display in map
})
print(GPPgrass06medWin,'GPPgrass06medWin' )

var GPPgrass06medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass06spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass06gpp',  //property of ROI to display in map
})
print(GPPgrass06medSpr,'GPPgrass06medSpr' )

var GPPgrass06medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass06sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass06gpp',  //property of ROI to display in map
})
print(GPPgrass06medSum,'GPPgrass06medSum' )

var GPPgrass06medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass06fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass06gpp',  //property of ROI to display in map
})
print(GPPgrass06medFal,'GPPgrass06medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP06medWin,
  description: 'grassGPP06medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP06medSpr,
  description: 'grassGPP06medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP06medSum,
  description: 'grassGPP06medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP06medFal,
  description: 'grassGPP06medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2007)
var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron)

// Create grassland mask
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2007
var cdl2007 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-01-01', '2006-12-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2007') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass07 = cdl2007.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass07geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass07geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass07win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2007-01-01', '2007-04-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

var gppGrass07spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2007-04-01', '2007-07-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

var gppGrass07sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2007-07-01', '2007-10-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

var gppGrass07fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2007-10-01', '2008-01-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

//Select GPP from dataset
var grass07gppWin = gppGrass07win.select('GPP')
var grass07gppSpr = gppGrass07spr.select('GPP')
var grass07gppSum = gppGrass07sum.select('GPP')
var grass07gppFal = gppGrass07fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP07medWin = grass07gppWin.median();
Map.addLayer(grassGPP07medWin, gppVis, 'grassGPP07medWin');

var grassGPP07medSpr = grass07gppSpr.median();
Map.addLayer(grassGPP07medSpr, gppVis, 'grassGPP07medSpr');

var grassGPP07medSum = grass07gppSum.median();
Map.addLayer(grassGPP07medSum, gppVis, 'grassGPP07medSum');

var grassGPP07medFal = grass07gppFal.median();
Map.addLayer(grassGPP07medFal, gppVis, 'grassGPP07medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2007_medValWin = grassGPP07medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2007_medValWin,'grassGPP_2007_medValWin');

var grassGPP_2007_medValSpr = grassGPP07medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2007_medValSpr,'grassGPP_2007_medValSpr');

var grassGPP_2007_medValSum = grassGPP07medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2007_medValSum,'grassGPP_2007_medValSum');

var grassGPP_2007_medValFal = grassGPP07medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2007_medValFal,'grassGPP_2007_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2007
var GPPgrass07medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass07win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass07gpp',  //property of ROI to display in map
})
print(GPPgrass07medWin,'GPPgrass07medWin' )

var GPPgrass07medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass07spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass07gpp',  //property of ROI to display in map
})
print(GPPgrass07medSpr,'GPPgrass07medSpr' )

var GPPgrass07medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass07sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass07gpp',  //property of ROI to display in map
})
print(GPPgrass07medSum,'GPPgrass07medSum' )

var GPPgrass07medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass07fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass07gpp',  //property of ROI to display in map
})
print(GPPgrass07medFal,'GPPgrass07medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP07medWin,
  description: 'grassGPP07medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP07medSpr,
  description: 'grassGPP07medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP07medSum,
  description: 'grassGPP07medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP07medFal,
  description: 'grassGPP07medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2008)
var cdl= ee.Image('USDA/NASS/CDL/2008').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2008
var cdl2008 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2008-01-01', '2008-12-31'))// Get 2008 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2008') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass08 = cdl2008.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass08geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass08geo)
//-------------------------------------------------------// GPP seasonal
var gppGrass08win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2008-01-01', '2008-04-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});
var gppGrass08spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2008-04-01', '2008-07-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});
var gppGrass08sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2008-07-01', '2008-10-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});
var gppGrass08fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2008-10-01', '2009-01-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});

//Select GPP from dataset
var grass08gppWin = gppGrass08win.select('GPP')
var grass08gppSpr = gppGrass08spr.select('GPP')
var grass08gppSum = gppGrass08sum.select('GPP')
var grass08gppFal = gppGrass08fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP08medWin = grass08gppWin.median();
Map.addLayer(grassGPP08medWin, gppVis, 'grassGPP08medWin');

var grassGPP08medSpr = grass08gppSpr.median();
Map.addLayer(grassGPP08medSpr, gppVis, 'grassGPP08medSpr');

var grassGPP08medSum = grass08gppSum.median();
Map.addLayer(grassGPP08medSum, gppVis, 'grassGPP08medSum');

var grassGPP08medFal = grass08gppFal.median();
Map.addLayer(grassGPP08medFal, gppVis, 'grassGPP08medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2008_medValWin = grassGPP08medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2008_medValWin,'grassGPP_2008_medValWin');

var grassGPP_2008_medValSpr = grassGPP08medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2008_medValSpr,'grassGPP_2008_medValSpr');

var grassGPP_2008_medValSum = grassGPP08medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2008_medValSum,'grassGPP_2008_medValSum');

var grassGPP_2008_medValFal = grassGPP08medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2008_medValFal,'grassGPP_2008_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2008
var GPPgrass08medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass08win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass08gpp',  //property of ROI to display in map
})
print(GPPgrass08medWin,'GPPgrass08medWin' )

var GPPgrass08medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass08spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass08gpp',  //property of ROI to display in map
})
print(GPPgrass08medSpr,'GPPgrass08medSpr' )

var GPPgrass08medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass08sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass08gpp',  //property of ROI to display in map
})
print(GPPgrass08medSum,'GPPgrass08medSum' )

var GPPgrass08medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass08fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass08gpp',  //property of ROI to display in map
})
print(GPPgrass08medFal,'GPPgrass08medFal' )

////--------------------------------Export images
Export.image.toDrive({
  image: grassGPP08medWin,
  description: 'grassGPP08medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP08medSpr,
  description: 'grassGPP08medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP08medSum,
  description: 'grassGPP08medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP08medFal,
  description: 'grassGPP08medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2009)
var cdl= ee.Image('USDA/NASS/CDL/2009').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2009
var cdl2009 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2009-01-01', '2009-12-31'))// Get 2009 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2009') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass09 = cdl2009.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass09geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass09geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass09win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2009-01-01', '2009-04-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});

var gppGrass09spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2009-04-01', '2009-07-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});

var gppGrass09sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2009-07-01', '2009-10-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});

var gppGrass09fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2009-10-01', '2010-01-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});

//Select GPP from dataset
var grass09gppWin = gppGrass09win.select('GPP')
var grass09gppSpr = gppGrass09spr.select('GPP')
var grass09gppSum = gppGrass09sum.select('GPP')
var grass09gppFal = gppGrass09fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP09medWin = grass09gppWin.median();
Map.addLayer(grassGPP09medWin, gppVis, 'grassGPP09medWin');

var grassGPP09medSpr = grass09gppSpr.median();
Map.addLayer(grassGPP09medSpr, gppVis, 'grassGPP09medSpr');

var grassGPP09medSum = grass09gppSum.median();
Map.addLayer(grassGPP09medSum, gppVis, 'grassGPP09medSum');

var grassGPP09medFal = grass09gppFal.median();
Map.addLayer(grassGPP09medFal, gppVis, 'grassGPP09medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2009_medValWin = grassGPP09medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2009_medValWin,'grassGPP_2009_medValWin');

var grassGPP_2009_medValSpr = grassGPP09medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2009_medValSpr,'grassGPP_2009_medValSpr');

var grassGPP_2009_medValSum = grassGPP09medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2009_medValSum,'grassGPP_2009_medValSum');

var grassGPP_2009_medValFal = grassGPP09medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2009_medValFal,'grassGPP_2009_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2009
var GPPgrass09medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass09win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass09gpp',  //property of ROI to display in map
})
print(GPPgrass09medWin,'GPPgrass09medWin' )

var GPPgrass09medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass09spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass09gpp',  //property of ROI to display in map
})
print(GPPgrass09medSpr,'GPPgrass09medSpr' )

var GPPgrass09medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass09sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass09gpp',  //property of ROI to display in map
})
print(GPPgrass09medSum,'GPPgrass09medSum' )

var GPPgrass09medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass09fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass09gpp',  //property of ROI to display in map
})
print(GPPgrass09medFal,'GPPgrass09medFal' )

////----------------------------Export images
Export.image.toDrive({
  image: grassGPP09medWin,
  description: 'grassGPP09medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP09medSpr,
  description: 'grassGPP09medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP09medSum,
  description: 'grassGPP09medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP09medFal,
  description: 'grassGPP09medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2010)
var cdl= ee.Image('USDA/NASS/CDL/2010').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2010
var cdl2010 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2010-01-01', '2010-12-31'))// Get 2010 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2010') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass10 = cdl2010.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass10geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass10geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass10win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2010-01-01', '2010-04-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});

var gppGrass10spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2010-04-01', '2010-07-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});

var gppGrass10sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2010-07-01', '2010-10-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});

var gppGrass10fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2010-10-01', '2011-01-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});

//Select GPP from dataset
var grass10gppWin = gppGrass10win.select('GPP')
var grass10gppSpr = gppGrass10spr.select('GPP')
var grass10gppSum = gppGrass10sum.select('GPP')
var grass10gppFal = gppGrass10fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP10medWin = grass10gppWin.median();
Map.addLayer(grassGPP10medWin, gppVis, 'grassGPP10medWin');

var grassGPP10medSpr = grass10gppSpr.median();
Map.addLayer(grassGPP10medSpr, gppVis, 'grassGPP10medSpr');

var grassGPP10medSum = grass10gppSum.median();
Map.addLayer(grassGPP10medSum, gppVis, 'grassGPP10medSum');

var grassGPP10medFal = grass10gppFal.median();
Map.addLayer(grassGPP10medFal, gppVis, 'grassGPP10medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2010_medValWin = grassGPP10medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2010_medValWin,'grassGPP_2010_medValWin');

var grassGPP_2010_medValSpr = grassGPP10medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2010_medValSpr,'grassGPP_2010_medValSpr');

var grassGPP_2010_medValSum = grassGPP10medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2010_medValSum,'grassGPP_2010_medValSum');

var grassGPP_2010_medValFal = grassGPP10medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2010_medValFal,'grassGPP_2010_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2010
var GPPgrass10medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass10win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass10gpp',  //property of ROI to display in map
})
print(GPPgrass10medWin,'GPPgrass10medWin' )

var GPPgrass10medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass10spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass10gpp',  //property of ROI to display in map
})
print(GPPgrass10medSpr,'GPPgrass10medSpr' )

var GPPgrass10medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass10sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass10gpp',  //property of ROI to display in map
})
print(GPPgrass10medSum,'GPPgrass10medSum' )

var GPPgrass10medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass10fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass10gpp',  //property of ROI to display in map
})
print(GPPgrass10medFal,'GPPgrass10medFal' )

////---------------------------Export images
Export.image.toDrive({
  image: grassGPP10medWin,
  description: 'grassGPP10medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP10medSpr,
  description: 'grassGPP10medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP10medSum,
  description: 'grassGPP10medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP10medFal,
  description: 'grassGPP10medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2011)
var cdl= ee.Image('USDA/NASS/CDL/2011').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2011
var cdl2011 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2011-01-01', '2011-12-31'))// Get 2011 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2011') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass11 = cdl2011.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass11geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass11geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass11win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2011-01-01', '2011-04-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});

var gppGrass11spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2011-04-01', '2011-07-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});

var gppGrass11sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2011-07-01', '2011-10-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});

var gppGrass11fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2011-10-01', '2012-01-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});
//Select GPP from dataset
var grass11gppWin = gppGrass11win.select('GPP')
var grass11gppSpr = gppGrass11spr.select('GPP')
var grass11gppSum = gppGrass11sum.select('GPP')
var grass11gppFal = gppGrass11fal.select('GPP')
//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP11medWin = grass11gppWin.median();
Map.addLayer(grassGPP11medWin, gppVis, 'grassGPP11medWin');

var grassGPP11medSpr = grass11gppSpr.median();
Map.addLayer(grassGPP11medSpr, gppVis, 'grassGPP11medSpr');

var grassGPP11medSum = grass11gppSum.median();
Map.addLayer(grassGPP11medSum, gppVis, 'grassGPP11medSum');

var grassGPP11medFal = grass11gppFal.median();
Map.addLayer(grassGPP11medFal, gppVis, 'grassGPP11medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2011_medValWin = grassGPP11medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2011_medValWin,'grassGPP_2011_medValWin');

var grassGPP_2011_medValSpr = grassGPP11medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2011_medValSpr,'grassGPP_2011_medValSpr');

var grassGPP_2011_medValSum = grassGPP11medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2011_medValSum,'grassGPP_2011_medValSum');

var grassGPP_2011_medValFal = grassGPP11medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2011_medValFal,'grassGPP_2011_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2011
var GPPgrass11medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass11win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass11gpp',  //property of ROI to display in map
})
print(GPPgrass11medWin,'GPPgrass11medWin' )

var GPPgrass11medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass11spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass11gpp',  //property of ROI to display in map
})
print(GPPgrass11medSpr,'GPPgrass11medSpr' )

var GPPgrass11medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass11sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass11gpp',  //property of ROI to display in map
})
print(GPPgrass11medSum,'GPPgrass11medSum' )

var GPPgrass11medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass11fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass11gpp',  //property of ROI to display in map
})
print(GPPgrass11medFal,'GPPgrass11medFal' )

////----------------------Export images
Export.image.toDrive({
  image: grassGPP11medWin,
  description: 'grassGPP11medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP11medSpr,
  description: 'grassGPP11medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP11medSum,
  description: 'grassGPP11medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP11medFal,
  description: 'grassGPP11medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2012)
var cdl= ee.Image('USDA/NASS/CDL/2012').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2012
var cdl2012 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2012-01-01', '2012-12-31'))// Get 2012 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2012') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass12 = cdl2012.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass12geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass12geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass12win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2012-01-01', '2012-04-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

var gppGrass12spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2012-04-01', '2012-07-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

var gppGrass12sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2012-07-01', '2012-10-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

var gppGrass12fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2012-10-01', '2013-01-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

//Select GPP from dataset
var grass12gppWin = gppGrass12win.select('GPP')
var grass12gppSpr = gppGrass12spr.select('GPP')
var grass12gppSum = gppGrass12sum.select('GPP')
var grass12gppFal = gppGrass12fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP12medWin = grass12gppWin.median();
Map.addLayer(grassGPP12medWin, gppVis, 'grassGPP12medWin');

var grassGPP12medSpr = grass12gppSpr.median();
Map.addLayer(grassGPP12medSpr, gppVis, 'grassGPP12medSpr');

var grassGPP12medSum = grass12gppSum.median();
Map.addLayer(grassGPP12medSum, gppVis, 'grassGPP12medSum');

var grassGPP12medFal = grass12gppFal.median();
Map.addLayer(grassGPP12medFal, gppVis, 'grassGPP12medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2012_medValWin = grassGPP12medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2012_medValWin,'grassGPP_2012_medValWin');

var grassGPP_2012_medValSpr = grassGPP12medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2012_medValSpr,'grassGPP_2012_medValSpr');

var grassGPP_2012_medValSum = grassGPP12medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2012_medValSum,'grassGPP_2012_medValSum');

var grassGPP_2012_medValFal = grassGPP12medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2012_medValFal,'grassGPP_2012_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2012
var GPPgrass12medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass12win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass12gpp',  //property of ROI to display in map
})
print(GPPgrass12medWin,'GPPgrass12medWin' )

var GPPgrass12medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass12spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass12gpp',  //property of ROI to display in map
})
print(GPPgrass12medSpr,'GPPgrass12medSpr' )

var GPPgrass12medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass12sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass12gpp',  //property of ROI to display in map
})
print(GPPgrass12medSum,'GPPgrass12medSum' )

var GPPgrass12medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass12fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass12gpp',  //property of ROI to display in map
})
print(GPPgrass12medFal,'GPPgrass12medFal' )

////--------------------Export images
Export.image.toDrive({
  image: grassGPP12medWin,
  description: 'grassGPP12medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP12medSpr,
  description: 'grassGPP12medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP12medSum,
  description: 'grassGPP12medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP12medFal,
  description: 'grassGPP12medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2013)
var cdl= ee.Image('USDA/NASS/CDL/2013').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2013
var cdl2013 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2013-01-01', '2013-12-31'))// Get 2013 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2013') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass13 = cdl2013.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass13geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass13geo)
//-------------------------------------------------------// GPP seasonal
var gppGrass13win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2013-01-01', '2013-04-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

var gppGrass13spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2013-04-01', '2013-07-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

var gppGrass13sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2013-07-01', '2013-10-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

var gppGrass13fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2013-10-01', '2014-01-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

//Select GPP from dataset
var grass13gppWin = gppGrass13win.select('GPP')
var grass13gppSpr = gppGrass13spr.select('GPP')
var grass13gppSum = gppGrass13sum.select('GPP')
var grass13gppFal = gppGrass13fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP13medWin = grass13gppWin.median();
Map.addLayer(grassGPP13medWin, gppVis, 'grassGPP13medWin');

var grassGPP13medSpr = grass13gppSpr.median();
Map.addLayer(grassGPP13medSpr, gppVis, 'grassGPP13medSpr');

var grassGPP13medSum = grass13gppSum.median();
Map.addLayer(grassGPP13medSum, gppVis, 'grassGPP13medSum');

var grassGPP13medFal = grass13gppFal.median();
Map.addLayer(grassGPP13medFal, gppVis, 'grassGPP13medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2013_medValWin = grassGPP13medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2013_medValWin,'grassGPP_2013_medValWin');

var grassGPP_2013_medValSpr = grassGPP13medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2013_medValSpr,'grassGPP_2013_medValSpr');

var grassGPP_2013_medValSum = grassGPP13medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2013_medValSum,'grassGPP_2013_medValSum');

var grassGPP_2013_medValFal = grassGPP13medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2013_medValFal,'grassGPP_2013_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2013
var GPPgrass13medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass13win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass13gpp',  //property of ROI to display in map
})
print(GPPgrass13medWin,'GPPgrass13medWin' )

var GPPgrass13medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass13spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass13gpp',  //property of ROI to display in map
})
print(GPPgrass13medSpr,'GPPgrass13medSpr' )

var GPPgrass13medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass13sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass13gpp',  //property of ROI to display in map
})
print(GPPgrass13medSum,'GPPgrass13medSum' )

var GPPgrass13medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass13fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass13gpp',  //property of ROI to display in map
})
print(GPPgrass13medFal,'GPPgrass13medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP13medWin,
  description: 'grassGPP13medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP13medSpr,
  description: 'grassGPP13medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP13medSum,
  description: 'grassGPP13medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP13medFal,
  description: 'grassGPP13medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2014)
var cdl= ee.Image('USDA/NASS/CDL/2014').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2014
var cdl2014 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2014-01-01', '2014-12-31'))// Get 2014 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2014') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass14 = cdl2014.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass14geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass14geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass14win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2014-01-01', '2014-04-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

var gppGrass14spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2014-04-01', '2014-07-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

var gppGrass14sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2014-07-01', '2014-10-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

var gppGrass14fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2014-10-01', '2015-01-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

//Select GPP from dataset
var grass14gppWin = gppGrass14win.select('GPP')
var grass14gppSpr = gppGrass14spr.select('GPP')
var grass14gppSum = gppGrass14sum.select('GPP')
var grass14gppFal = gppGrass14fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP14medWin = grass14gppWin.median();
Map.addLayer(grassGPP14medWin, gppVis, 'grassGPP14medWin');

var grassGPP14medSpr = grass14gppSpr.median();
Map.addLayer(grassGPP14medSpr, gppVis, 'grassGPP14medSpr');

var grassGPP14medSum = grass14gppSum.median();
Map.addLayer(grassGPP14medSum, gppVis, 'grassGPP14medSum');

var grassGPP14medFal = grass14gppFal.median();
Map.addLayer(grassGPP14medFal, gppVis, 'grassGPP14medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2014_medValWin = grassGPP14medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2014_medValWin,'grassGPP_2014_medValWin');

var grassGPP_2014_medValSpr = grassGPP14medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2014_medValSpr,'grassGPP_2014_medValSpr');

var grassGPP_2014_medValSum = grassGPP14medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2014_medValSum,'grassGPP_2014_medValSum');

var grassGPP_2014_medValFal = grassGPP14medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2014_medValFal,'grassGPP_2014_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2014
var GPPgrass14medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass14win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass14gpp',  //property of ROI to display in map
})
print(GPPgrass14medWin,'GPPgrass14medWin' )

var GPPgrass14medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass14spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass14gpp',  //property of ROI to display in map
})
print(GPPgrass14medSpr,'GPPgrass14medSpr' )

var GPPgrass14medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass14sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass14gpp',  //property of ROI to display in map
})
print(GPPgrass14medSum,'GPPgrass14medSum' )

var GPPgrass14medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass14fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass14gpp',  //property of ROI to display in map
})
print(GPPgrass14medFal,'GPPgrass14medFal' )

////--------------------Export images
Export.image.toDrive({
  image: grassGPP14medWin,
  description: 'grassGPP14medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP14medSpr,
  description: 'grassGPP14medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP14medSum,
  description: 'grassGPP14medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP14medFal,
  description: 'grassGPP14medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2015)
var cdl= ee.Image('USDA/NASS/CDL/2015').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2015
var cdl2015 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2015-01-01', '2015-12-31'))// Get 2015 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2015') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass15 = cdl2015.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass15geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass15geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass15win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2015-01-01', '2015-04-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

var gppGrass15spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2015-04-01', '2015-07-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

var gppGrass15sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2015-07-01', '2015-10-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

var gppGrass15fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2015-10-01', '2016-01-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

//Select GPP from dataset
var grass15gppWin = gppGrass15win.select('GPP')
var grass15gppSpr = gppGrass15spr.select('GPP')
var grass15gppSum = gppGrass15sum.select('GPP')
var grass15gppFal = gppGrass15fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP15medWin = grass15gppWin.median();
Map.addLayer(grassGPP15medWin, gppVis, 'grassGPP15medWin');

var grassGPP15medSpr = grass15gppSpr.median();
Map.addLayer(grassGPP15medSpr, gppVis, 'grassGPP15medSpr');

var grassGPP15medSum = grass15gppSum.median();
Map.addLayer(grassGPP15medSum, gppVis, 'grassGPP15medSum');

var grassGPP15medFal = grass15gppFal.median();
Map.addLayer(grassGPP15medFal, gppVis, 'grassGPP15medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2015_medValWin = grassGPP15medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2015_medValWin,'grassGPP_2015_medValWin');

var grassGPP_2015_medValSpr = grassGPP15medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2015_medValSpr,'grassGPP_2015_medValSpr');

var grassGPP_2015_medValSum = grassGPP15medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2015_medValSum,'grassGPP_2015_medValSum');

var grassGPP_2015_medValFal = grassGPP15medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2015_medValFal,'grassGPP_2015_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2015
var GPPgrass15medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass15win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass15gpp',  //property of ROI to display in map
})
print(GPPgrass15medWin,'GPPgrass15medWin' )

var GPPgrass15medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass15spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass15gpp',  //property of ROI to display in map
})
print(GPPgrass15medSpr,'GPPgrass15medSpr' )

var GPPgrass15medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass15sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass15gpp',  //property of ROI to display in map
})
print(GPPgrass15medSum,'GPPgrass15medSum' )

var GPPgrass15medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass15fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass15gpp',  //property of ROI to display in map
})
print(GPPgrass15medFal,'GPPgrass15medFal' )

////---------------------Export images
Export.image.toDrive({
  image: grassGPP15medWin,
  description: 'grassGPP15medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP15medSpr,
  description: 'grassGPP15medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP15medSum,
  description: 'grassGPP15medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP15medFal,
  description: 'grassGPP15medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2016)
var cdl= ee.Image('USDA/NASS/CDL/2016').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2016
var cdl2016 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2016-01-01', '2016-12-31'))// Get 2016 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2016') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass16 = cdl2016.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// Create geometry from "masked"
var grass16geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass16geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass16win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2016-01-01', '2016-04-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

var gppGrass16spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2016-04-01', '2016-07-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

var gppGrass16sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2016-07-01', '2016-10-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

var gppGrass16fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2016-10-01', '2017-01-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

//Select GPP from dataset
var grass16gppWin = gppGrass16win.select('GPP')
var grass16gppSpr = gppGrass16spr.select('GPP')
var grass16gppSum = gppGrass16sum.select('GPP')
var grass16gppFal = gppGrass16fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP16medWin = grass16gppWin.median();
Map.addLayer(grassGPP16medWin, gppVis, 'grassGPP16medWin');
var grassGPP16medSpr = grass16gppSpr.median();
Map.addLayer(grassGPP16medSpr, gppVis, 'grassGPP16medSpr');
var grassGPP16medSum = grass16gppSum.median();
Map.addLayer(grassGPP16medSum, gppVis, 'grassGPP16medSum');
var grassGPP16medFal = grass16gppFal.median();
Map.addLayer(grassGPP16medFal, gppVis, 'grassGPP16medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2016_medValWin = grassGPP16medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2016_medValWin,'grassGPP_2016_medValWin');

var grassGPP_2016_medValSpr = grassGPP16medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2016_medValSpr,'grassGPP_2016_medValSpr');

var grassGPP_2016_medValSum = grassGPP16medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2016_medValSum,'grassGPP_2016_medValSum');

var grassGPP_2016_medValFal = grassGPP16medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2016_medValFal,'grassGPP_2016_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2016
var GPPgrass16medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass16win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass16gpp',  //property of ROI to display in map
})
print(GPPgrass16medWin,'GPPgrass16medWin' )

var GPPgrass16medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass16spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass16gpp',  //property of ROI to display in map
})
print(GPPgrass16medSpr,'GPPgrass16medSpr' )

var GPPgrass16medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass16sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass16gpp',  //property of ROI to display in map
})
print(GPPgrass16medSum,'GPPgrass16medSum' )

var GPPgrass16medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass16fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass16gpp',  //property of ROI to display in map
})
print(GPPgrass16medFal,'GPPgrass16medFal' )

////--------------------------Export images
Export.image.toDrive({
  image: grassGPP16medWin,
  description: 'grassGPP16medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP16medSpr,
  description: 'grassGPP16medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP16medSum,
  description: 'grassGPP16medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP16medFal,
  description: 'grassGPP16medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2017)
var cdl= ee.Image('USDA/NASS/CDL/2017').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2017
var cdl2017 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2017-01-01', '2017-12-31'))// Get 2017 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2017') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass17 = cdl2017.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass17geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass17geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass17win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2017-01-01', '2017-04-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

var gppGrass17spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2017-04-01', '2017-07-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

var gppGrass17sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2017-07-01', '2017-10-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

var gppGrass17fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2017-10-01', '2018-01-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

//Select GPP from dataset
var grass17gppWin = gppGrass17win.select('GPP')
var grass17gppSpr = gppGrass17spr.select('GPP')
var grass17gppSum = gppGrass17sum.select('GPP')
var grass17gppFal = gppGrass17fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP17medWin = grass17gppWin.median();
Map.addLayer(grassGPP17medWin, gppVis, 'grassGPP17medWin');

var grassGPP17medSpr = grass17gppSpr.median();
Map.addLayer(grassGPP17medSpr, gppVis, 'grassGPP17medSpr');

var grassGPP17medSum = grass17gppSum.median();
Map.addLayer(grassGPP17medSum, gppVis, 'grassGPP17medSum');

var grassGPP17medFal = grass17gppFal.median();
Map.addLayer(grassGPP17medFal, gppVis, 'grassGPP17medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2017_medValWin = grassGPP17medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2017_medValWin,'grassGPP_2017_medValWin');

var grassGPP_2017_medValSpr = grassGPP17medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2017_medValSpr,'grassGPP_2017_medValSpr');

var grassGPP_2017_medValSum = grassGPP17medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2017_medValSum,'grassGPP_2017_medValSum');

var grassGPP_2017_medValFal = grassGPP17medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2017_medValFal,'grassGPP_2017_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2017
var GPPgrass17medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass17win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass17gpp',  //property of ROI to display in map
})
print(GPPgrass17medWin,'GPPgrass17medWin' )

var GPPgrass17medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass17spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass17gpp',  //property of ROI to display in map
})
print(GPPgrass17medSpr,'GPPgrass17medSpr' )

var GPPgrass17medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass17sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass17gpp',  //property of ROI to display in map
})
print(GPPgrass17medSum,'GPPgrass17medSum' )

var GPPgrass17medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass17fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass17gpp',  //property of ROI to display in map
})
print(GPPgrass17medFal,'GPPgrass17medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP17medWin,
  description: 'grassGPP17medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP17medSpr,
  description: 'grassGPP17medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP17medSum,
  description: 'grassGPP17medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP17medFal,
  description: 'grassGPP17medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2018)
var cdl= ee.Image('USDA/NASS/CDL/2018').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2018
var cdl2018 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2018-01-01', '2018-12-31'))// Get 2018 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2018') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass18 = cdl2018.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass18geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass18geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass18win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2018-01-01', '2018-04-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

var gppGrass18spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2018-04-01', '2018-07-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

var gppGrass18sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2018-07-01', '2018-10-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

var gppGrass18fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2018-10-01', '2019-01-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

//Select GPP from dataset
var grass18gppWin = gppGrass18win.select('GPP')
var grass18gppSpr = gppGrass18spr.select('GPP')
var grass18gppSum = gppGrass18sum.select('GPP')
var grass18gppFal = gppGrass18fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP18medWin = grass18gppWin.median();
Map.addLayer(grassGPP17medWin, gppVis, 'grassGPP17medWin');

var grassGPP18medSpr = grass18gppSpr.median();
Map.addLayer(grassGPP17medSpr, gppVis, 'grassGPP17medSpr');

var grassGPP18medSum = grass18gppSum.median();
Map.addLayer(grassGPP17medSum, gppVis, 'grassGPP17medSum');

var grassGPP18medFal = grass18gppFal.median();
Map.addLayer(grassGPP17medFal, gppVis, 'grassGPP17medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2018_medValWin = grassGPP18medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2018_medValWin,'grassGPP_2018_medValWin');

var grassGPP_2018_medValSpr = grassGPP18medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2018_medValSpr,'grassGPP_2018_medValSpr');

var grassGPP_2018_medValSum = grassGPP18medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2018_medValSum,'grassGPP_2018_medValSum');

var grassGPP_2018_medValFal = grassGPP18medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2018_medValFal,'grassGPP_2018_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2018
var GPPgrass18medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass18win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass18gpp',  //property of ROI to display in map
})
print(GPPgrass18medWin,'GPPgrass18medWin' )

var GPPgrass18medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass18spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass18gpp',  //property of ROI to display in map
})
print(GPPgrass18medSpr,'GPPgrass18medSpr' )

var GPPgrass18medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass18sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass18gpp',  //property of ROI to display in map
})
print(GPPgrass18medSum,'GPPgrass18medSum' )

var GPPgrass18medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass18fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass18gpp',  //property of ROI to display in map
})
print(GPPgrass18medFal,'GPPgrass18medFal' )

////----------------------Export images
Export.image.toDrive({
  image: grassGPP18medWin,
  description: 'grassGPP18medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP18medSpr,
  description: 'grassGPP18medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP18medSum,
  description: 'grassGPP18medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP18medFal,
  description: 'grassGPP18medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2019)
var cdl= ee.Image('USDA/NASS/CDL/2019').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2019
var cdl2019 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2019-01-01', '2019-12-31'))// Get 2019 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2019') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass19 = cdl2019.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass19geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass19geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass19win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2019-01-01', '2019-04-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

var gppGrass19spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2019-04-01', '2019-07-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

var gppGrass19sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2019-07-01', '2019-10-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

var gppGrass19fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2019-10-01', '2020-01-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

//Select GPP from dataset
var grass19gppWin = gppGrass19win.select('GPP')
var grass19gppSpr = gppGrass19spr.select('GPP')
var grass19gppSum = gppGrass19sum.select('GPP')
var grass19gppFal = gppGrass19fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP19medWin = grass19gppWin.median();
Map.addLayer(grassGPP17medWin, gppVis, 'grassGPP17medWin');

var grassGPP19medSpr = grass19gppSpr.median();
Map.addLayer(grassGPP17medSpr, gppVis, 'grassGPP17medSpr');

var grassGPP19medSum = grass19gppSum.median();
Map.addLayer(grassGPP17medSum, gppVis, 'grassGPP17medSum');

var grassGPP19medFal = grass19gppFal.median();
Map.addLayer(grassGPP17medFal, gppVis, 'grassGPP17medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2019_medValWin = grassGPP19medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2019_medValWin,'grassGPP_2019_medValWin');

var grassGPP_2019_medValSpr = grassGPP19medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2019_medValSpr,'grassGPP_2019_medValSpr');

var grassGPP_2019_medValSum = grassGPP19medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2019_medValSum,'grassGPP_2019_medValSum');

var grassGPP_2019_medValFal = grassGPP19medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2019_medValFal,'grassGPP_2019_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2019
var GPPgrass19medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass19win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass19gpp',  //property of ROI to display in map
})
print(GPPgrass19medWin,'GPPgrass19medWin' )

var GPPgrass19medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass19spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass19gpp',  //property of ROI to display in map
})
print(GPPgrass19medSpr,'GPPgrass19medSpr' )

var GPPgrass19medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass19sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass19gpp',  //property of ROI to display in map
})
print(GPPgrass19medSum,'GPPgrass19medSum' )

var GPPgrass19medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass19fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass19gpp',  //property of ROI to display in map
})
print(GPPgrass19medFal,'GPPgrass19medFal' )


////-----------------------Export images
Export.image.toDrive({
  image: grassGPP19medWin,
  description: 'grassGPP19medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP19medSpr,
  description: 'grassGPP19medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP19medSum,
  description: 'grassGPP19medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP19medFal,
  description: 'grassGPP19medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2020)
var cdl= ee.Image('USDA/NASS/CDL/2020').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2020
var cdl2020 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2020-01-01', '2020-12-31'))// Get 2020 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2020') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass20 = cdl2020.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

//
// Create geometry from "masked"
var grass20geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass20geo)

//-------------------------------------------------------// GPP seasonal
var gppGrass20win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2020-01-01', '2020-04-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

var gppGrass20spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2020-04-01', '2020-07-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

var gppGrass20sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2020-07-01', '2020-10-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

var gppGrass20fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2020-10-01', '2021-01-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

//Select GPP from dataset
var grass20gppWin = gppGrass20win.select('GPP')
var grass20gppSpr = gppGrass20spr.select('GPP')
var grass20gppSum = gppGrass20sum.select('GPP')
var grass20gppFal = gppGrass20fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP20medWin = grass20gppWin.median();
Map.addLayer(grassGPP20medWin, gppVis, 'grassGPP20medWin');

var grassGPP20medSpr = grass20gppSpr.median();
Map.addLayer(grassGPP20medSpr, gppVis, 'grassGPP20medSpr');

var grassGPP20medSum = grass20gppSum.median();
Map.addLayer(grassGPP20medSum, gppVis, 'grassGPP20medSum');

var grassGPP20medFal = grass20gppFal.median();
Map.addLayer(grassGPP20medFal, gppVis, 'grassGPP20medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_20_medValWin = grassGPP20medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_20_medValWin,'grassGPP_20_medValWin');

var grassGPP_20_medValSpr = grassGPP20medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_20_medValSpr,'grassGPP_20_medValSpr');

var grassGPP_20_medValSum = grassGPP20medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_20_medValSum,'grassGPP_20_medValSum');

var grassGPP_20_medValFal = grassGPP20medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_20_medValFal,'grassGPP_20_medValFal');

//-----------------------------------------------------------------//Make plot of grassland GPP data 2020
var GPPgrass20medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass20win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass20gpp',  //property of ROI to display in map
})
print(GPPgrass20medWin,'GPPgrass20medWin' )

var GPPgrass20medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass20spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass20gpp',  //property of ROI to display in map
})
print(GPPgrass20medSpr,'GPPgrass20medSpr' )

var GPPgrass20medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass20sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass20gpp',  //property of ROI to display in map
})
print(GPPgrass20medSum,'GPPgrass20medSum' )

var GPPgrass20medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass20fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass20gpp',  //property of ROI to display in map
})
print(GPPgrass20medFal,'GPPgrass20medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP20medWin,
  description: 'grassGPP20medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP20medSpr,
  description: 'grassGPP20medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP20medSum,
  description: 'grassGPP20medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP20medFal,
  description: 'grassGPP20medFal',
  scale: 30,
  region:Cimarron,
});

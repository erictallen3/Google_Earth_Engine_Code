// Assign Cimarron county shapefile to variable "table"
var table = ee.FeatureCollection("users/erictallen3/CimShp");

//// Define study area
var Cimarron = ee.FeatureCollection(table)
    .filter("COUNTY_NAM == 'CIMARRON'")
    .geometry();
Map.addLayer(Cimarron);
Map.centerObject(Cimarron);

var collection = ee.ImageCollection('GRIDMET/DROUGHT').filterBounds(Cimarron);
print(collection);

////------------------------------Grass SPI 2005
var dS = '2005-01-01';
var dE = '2005-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y05 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2005
var cdl05 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-07-01', '2006-07-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl05') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass05 = cdl05.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass05geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass05geo);

//-------------------------------------------------------- Land use type-specific SPI calcs
var SPI1y05GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2005-01-01', '2005-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y05GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2005-04-01', '2005-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y05GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2005-07-01', '2005-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y05GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2005-10-01', '2006-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph05win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y05GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph05win,SPI1y05GRASSwin,'grassSPI1yrgraph05win' );

var grassSPI1yrgraph05spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y05GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph05spr,SPI1y05GRASSspr,'grassSPI1yrgraph05spr' );

var grassSPI1yrgraph05sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y05GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph05sum,SPI1y05GRASSsum,'grassSPI1yrgraph05sum' );

var grassSPI1yrgraph05fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y05GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph05fal,SPI1y05GRASSfal,'grassSPI1yrgraph05fal' );

//----------------------------------------------------------------------Add SPI map layer
var SPI1yMed05win = SPI1y05GRASSwin.median();
Map.addLayer(SPI1yMed05win, colorbarOptions1, 'SPI1yMed05win');

var SPI1yMed05spr = SPI1y05GRASSspr.median();
Map.addLayer(SPI1yMed05spr, colorbarOptions1, 'SPI1yMed05spr');

var SPI1yMed05sum = SPI1y05GRASSsum.median();
Map.addLayer(SPI1yMed05sum, colorbarOptions1, 'SPI1yMed05sum');

var SPI1yMed05fal = SPI1y05GRASSfal.median();
Map.addLayer(SPI1yMed05fal, colorbarOptions1, 'SPI1yMed05fal');

// // //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed05win,
  description: 'SPI1yMed05win',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed05spr,
  description: 'SPI1yMed05spr',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed05sum,
  description: 'SPI1yMed05sum',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed05fal,
  description: 'SPI1yMed05fal',
  scale: 4000,
  region:Cimarron,
});

////------------------------------------------------------------------------Grass SPI 2006
var dS = '2006-01-01';
var dE = '2006-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

//-------------------------------------------Select 1yr SPI from dataset
var SPI1y06 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2006
var cdl06 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-07-01', '2006-07-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl06') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass06 = cdl06.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

//Create geometry from "maskedGrass"
var grass06geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass06geo);

// Land use type-specific SPI calcs
var SPI1y06GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2006-01-01', '2006-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y06GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2006-04-01', '2006-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y06GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2006-07-01', '2006-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y06GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2006-10-01', '2007-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph06win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y06GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph06win,SPI1y06GRASSwin,'grassSPI1yrgraph06win' );

var grassSPI1yrgraph06spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y06GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph06spr,SPI1y06GRASSspr,'grassSPI1yrgraph06spr' );

var grassSPI1yrgraph06sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y06GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph06sum,SPI1y06GRASSsum,'grassSPI1yrgraph06sum' );

var grassSPI1yrgraph06fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y06GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph06fal,SPI1y06GRASSfal,'grassSPI1yrgraph06fal' );

//Add SPI map layer
var SPI1yMed06win = SPI1y06GRASSwin.median();
Map.addLayer(SPI1yMed06win, colorbarOptions1, 'SPI1yMed06win');

var SPI1yMed06spr = SPI1y06GRASSspr.median();
Map.addLayer(SPI1yMed06spr, colorbarOptions1, 'SPI1yMed06spr');

var SPI1yMed06sum = SPI1y06GRASSsum.median();
Map.addLayer(SPI1yMed06sum, colorbarOptions1, 'SPI1yMed06sum');

var SPI1yMed06fal = SPI1y06GRASSfal.median();
Map.addLayer(SPI1yMed06fal, colorbarOptions1, 'SPI1yMed06fal');

// // //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed06win,
  description: 'SPI1yMed06win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed06spr,
  description: 'SPI1yMed06spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed06sum,
  description: 'SPI1yMed06sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed06fal,
  description: 'SPI1yMed06fal',
  scale: 4000,
  region:Cimarron,
});

////-------------------------------------------------------------Grass SPI 2007
var dS = '2007-01-01';
var dE = '2007-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y07 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2007
var cdl07 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-07-01', '2006-07-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl07') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass07 = cdl07.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

//// Create geometry from "maskedGrass"
var grass07geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass07geo);

// Land use type-specific SPI calcs
var SPI1y07GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2007-01-01', '2007-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y07GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2007-04-01', '2007-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y07GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2007-07-01', '2007-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y07GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2007-10-01', '2008-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});


var grassSPI1yrgraph07win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y07GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph07win,SPI1y07GRASSwin,'grassSPI1yrgraph07win' );

var grassSPI1yrgraph07spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y07GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph07spr,SPI1y07GRASSspr,'grassSPI1yrgraph07spr' );

var grassSPI1yrgraph07sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y07GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph07sum,SPI1y07GRASSsum,'grassSPI1yrgraph07sum' );

var grassSPI1yrgraph07fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y07GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph07fal,SPI1y07GRASSfal,'grassSPI1yrgraph07fal' );

//Add SPI map layer
var SPI1yMed07win = SPI1y07GRASSwin.median();
Map.addLayer(SPI1yMed07win, colorbarOptions1, 'SPI1yMed07win');

var SPI1yMed07spr = SPI1y07GRASSspr.median();
Map.addLayer(SPI1yMed07spr, colorbarOptions1, 'SPI1yMed07spr');

var SPI1yMed07sum = SPI1y07GRASSsum.median();
Map.addLayer(SPI1yMed07sum, colorbarOptions1, 'SPI1yMed07sum');

var SPI1yMed07fal = SPI1y07GRASSfal.median();
Map.addLayer(SPI1yMed07fal, colorbarOptions1, 'SPI1yMed07fal');

// // //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed07win,
  description: 'SPI1yMed07win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed07spr,
  description: 'SPI1yMed07spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed07sum,
  description: 'SPI1yMed07sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed07fal,
  description: 'SPI1yMed07fal',
  scale: 4000,
  region:Cimarron,
});

////------------------------------------------------------------Grass SPI 2008
var dS = '2008-01-01';
var dE = '2008-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y08 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2008').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2008
var cdl08 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2008-07-01', '2008-07-31'))// Get 2008 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl08') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass08 = cdl08.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass08geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass08geo);

// Land use type-specific SPI calcs
var SPI1y08GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2008-01-01', '2008-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y08GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2008-04-01', '2008-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y08GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2008-07-01', '2008-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y08GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2008-10-01', '2009-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph08win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y08GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph08win,SPI1y08GRASSwin,'grassSPI1yrgraph08win' );

var grassSPI1yrgraph08spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y08GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph08spr,SPI1y08GRASSspr,'grassSPI1yrgraph08spr' );

var grassSPI1yrgraph08sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y08GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph08sum,SPI1y08GRASSsum,'grassSPI1yrgraph08sum' );

var grassSPI1yrgraph08fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y08GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph08fal,SPI1y08GRASSfal,'grassSPI1yrgraph08fal' );

//Add SPI map layer
var SPI1yMed08win = SPI1y08GRASSwin.median();
Map.addLayer(SPI1yMed08win, colorbarOptions1, 'SPI1yMed08win');

var SPI1yMed08spr = SPI1y08GRASSspr.median();
Map.addLayer(SPI1yMed08spr, colorbarOptions1, 'SPI1yMed08spr');

var SPI1yMed08sum = SPI1y08GRASSsum.median();
Map.addLayer(SPI1yMed08sum, colorbarOptions1, 'SPI1yMed08sum');

var SPI1yMed08fal = SPI1y08GRASSfal.median();
Map.addLayer(SPI1yMed08fal, colorbarOptions1, 'SPI1yMed08fal');

// // //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed08win,
  description: 'SPI1yMed08win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed08spr,
  description: 'SPI1yMed08spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed08sum,
  description: 'SPI1yMed08sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed08fal,
  description: 'SPI1yMed08fal',
  scale: 4000,
  region:Cimarron,
});

////--------------------------------------------------------------------Grass SPI 2009
var dS = '2009-01-01';
var dE = '2009-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y09 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2009').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2009
var cdl09 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2009-07-01', '2009-07-31'))// Get 2009 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl09') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass09 = cdl09.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass09geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass09geo);

// Land use type-specific SPI calcs
var SPI1y09GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2009-01-01', '2009-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y09GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2009-04-01', '2009-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y09GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2009-07-01', '2009-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y09GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2009-10-01', '2010-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph09win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y09GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph09win,SPI1y09GRASSwin,'grassSPI1yrgraph09win' );

var grassSPI1yrgraph09spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y09GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph09spr,SPI1y09GRASSspr,'grassSPI1yrgraph09spr' );

var grassSPI1yrgraph09sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y09GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph09sum,SPI1y09GRASSsum,'grassSPI1yrgraph09sum' );

var grassSPI1yrgraph09fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y09GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph09fal,SPI1y09GRASSfal,'grassSPI1yrgraph09fal' );

//Add SPI map layer
var SPI1yMed09win = SPI1y09GRASSwin.median();
Map.addLayer(SPI1yMed09win, colorbarOptions1, 'SPI1yMed09win');

var SPI1yMed09spr = SPI1y09GRASSspr.median();
Map.addLayer(SPI1yMed09spr, colorbarOptions1, 'SPI1yMed09spr');

var SPI1yMed09sum = SPI1y09GRASSsum.median();
Map.addLayer(SPI1yMed09sum, colorbarOptions1, 'SPI1yMed09sum');

var SPI1yMed09fal = SPI1y09GRASSfal.median();
Map.addLayer(SPI1yMed09fal, colorbarOptions1, 'SPI1yMed09fal');

// // //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed09win,
  description: 'SPI1yMed09win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed09spr,
  description: 'SPI1yMed09spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed09sum,
  description: 'SPI1yMed09sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed09fal,
  description: 'SPI1yMed09fal',
  scale: 4000,
  region:Cimarron,
});

// //---------------------------------------------------------------------------
// //Grass SPI 2010
var dS = '2010-01-01';
var dE = '2010-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y10 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2010').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2010
var cdl10 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2010-07-01', '2010-07-31'))// Get 2010 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl10') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass10 = cdl10.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass10geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass10geo);

// Land use type-specific SPI calcs
var SPI1y10GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2010-01-01', '2010-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y10GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2010-04-01', '2010-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y10GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2010-07-01', '2010-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y10GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2010-10-01', '2011-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph10win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y10GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph10win,SPI1y10GRASSwin,'grassSPI1yrgraph10win' );

var grassSPI1yrgraph10spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y10GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph10spr,SPI1y10GRASSspr,'grassSPI1yrgraph10spr' );

var grassSPI1yrgraph10sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y10GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph10sum,SPI1y10GRASSsum,'grassSPI1yrgraph10sum' );

var grassSPI1yrgraph10fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y10GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph10fal,SPI1y10GRASSfal,'grassSPI1yrgraph10fal' );

//Add SPI map layer
var SPI1yMed10win = SPI1y10GRASSwin.median();
Map.addLayer(SPI1yMed10win, colorbarOptions1, 'SPI1yMed10win');

var SPI1yMed10spr = SPI1y10GRASSspr.median();
Map.addLayer(SPI1yMed10spr, colorbarOptions1, 'SPI1yMed10spr');

var SPI1yMed10sum = SPI1y10GRASSsum.median();
Map.addLayer(SPI1yMed10sum, colorbarOptions1, 'SPI1yMed10sum');

var SPI1yMed10fal = SPI1y10GRASSfal.median();
Map.addLayer(SPI1yMed10fal, colorbarOptions1, 'SPI1yMed10fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed10win,
  description: 'SPI1yMed10win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed10spr,
  description: 'SPI1yMed10spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed10sum,
  description: 'SPI1yMed10sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed10fal,
  description: 'SPI1yMed10fal',
  scale: 4000,
  region:Cimarron,
});

// //---------------------------------------------------------------------------
// //Grass SPI 2011
var dS = '2011-01-01';
var dE = '2011-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y11 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2011').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2011
var cdl11 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2011-07-01', '2011-07-31'))// Get 2011 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl11') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass11 = cdl11.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass11geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass11geo);

// Land use type-specific SPI calcs
var SPI1y11GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2011-01-01', '2011-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y11GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2011-04-01', '2011-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y11GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2011-07-01', '2011-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y11GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2011-10-01', '2012-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph11win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y11GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph11win,SPI1y11GRASSwin,'grassSPI1yrgraph11win' );

var grassSPI1yrgraph11spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y11GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph11spr,SPI1y11GRASSspr,'grassSPI1yrgraph11spr' );

var grassSPI1yrgraph11sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y11GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph11sum,SPI1y11GRASSsum,'grassSPI1yrgraph11sum' );

var grassSPI1yrgraph11fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y11GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph11fal,SPI1y11GRASSfal,'grassSPI1yrgraph11fal' );

//Add SPI map layer
var SPI1yMed11win = SPI1y11GRASSwin.median();
Map.addLayer(SPI1yMed11win, colorbarOptions1, 'SPI1yMed11win');

var SPI1yMed11spr = SPI1y11GRASSspr.median();
Map.addLayer(SPI1yMed11spr, colorbarOptions1, 'SPI1yMed11spr');

var SPI1yMed11sum = SPI1y11GRASSsum.median();
Map.addLayer(SPI1yMed11sum, colorbarOptions1, 'SPI1yMed11sum');

var SPI1yMed11fal = SPI1y11GRASSfal.median();
Map.addLayer(SPI1yMed11fal, colorbarOptions1, 'SPI1yMed11fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed11win,
  description: 'SPI1yMed11win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed11spr,
  description: 'SPI1yMed11spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed11sum,
  description: 'SPI1yMed11sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed11fal,
  description: 'SPI1yMed11fal',
  scale: 4000,
  region:Cimarron,
});

// //------------------------------------------------------------------------------------
// //Grass SPI 2012
var dS = '2012-01-01';
var dE = '2012-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y11 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2012').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2012
var cdl12 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2012-07-01', '2012-07-31'))// Get 2012 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl12') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass12 = cdl12.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass12geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass12geo);

// Land use type-specific SPI calcs
var SPI1y12GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2012-01-01', '2012-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y12GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2012-04-01', '2012-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y12GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2012-07-01', '2012-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y12GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2012-10-01', '2013-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph12win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y12GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph12win,SPI1y12GRASSwin,'grassSPI1yrgraph12win' );

var grassSPI1yrgraph12spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y12GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph12spr,SPI1y12GRASSspr,'grassSPI1yrgraph12spr' );

var grassSPI1yrgraph12sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y12GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph12sum,SPI1y12GRASSsum,'grassSPI1yrgraph12sum' );

var grassSPI1yrgraph12fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y12GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph12fal,SPI1y12GRASSfal,'grassSPI1yrgraph12fal' );

//Add SPI map layer
var SPI1yMed12win = SPI1y12GRASSwin.median();
Map.addLayer(SPI1yMed12win, colorbarOptions1, 'SPI1yMed12win');

var SPI1yMed12spr = SPI1y12GRASSspr.median();
Map.addLayer(SPI1yMed12spr, colorbarOptions1, 'SPI1yMed12spr');

var SPI1yMed12sum = SPI1y12GRASSsum.median();
Map.addLayer(SPI1yMed12sum, colorbarOptions1, 'SPI1yMed12sum');

var SPI1yMed12fal = SPI1y12GRASSfal.median();
Map.addLayer(SPI1yMed12fal, colorbarOptions1, 'SPI1yMed12fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed12win,
  description: 'SPI1yMed12win',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed12spr,
  description: 'SPI1yMed12spr',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed12sum,
  description: 'SPI1yMed12sum',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed12fal,
  description: 'SPI1yMed12fal',
  scale: 4000,
  region:Cimarron,
});

// //-------------------------------------------------------------------Grass SPI 2013
var dS = '2013-01-01';
var dE = '2013-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y13 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2013').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2013
var cdl13 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2013-07-01', '2013-07-31'))// Get 2013 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl13') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass13 = cdl13.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass13geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass13geo);

// Land use type-specific SPI calcs
var SPI1y13GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2013-01-01', '2013-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y13GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2013-04-01', '2013-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y13GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2013-07-01', '2013-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y13GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2013-10-01', '2014-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph13win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y13GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph13win,SPI1y13GRASSwin,'grassSPI1yrgraph13win' );

var grassSPI1yrgraph13spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y13GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph13spr,SPI1y13GRASSspr,'grassSPI1yrgraph13spr' );

var grassSPI1yrgraph13sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y13GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph13sum,SPI1y13GRASSsum,'grassSPI1yrgraph13sum' );

var grassSPI1yrgraph13fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y13GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph13fal,SPI1y13GRASSfal,'grassSPI1yrgraph13fal' );

//Add SPI map layer
var SPI1yMed13win = SPI1y13GRASSwin.median();
Map.addLayer(SPI1yMed13win, colorbarOptions1, 'SPI1yMed13win');

var SPI1yMed13spr = SPI1y13GRASSspr.median();
Map.addLayer(SPI1yMed13spr, colorbarOptions1, 'SPI1yMed13spr');

var SPI1yMed13sum = SPI1y13GRASSsum.median();
Map.addLayer(SPI1yMed13sum, colorbarOptions1, 'SPI1yMed13sum');

var SPI1yMed13fal = SPI1y13GRASSfal.median();
Map.addLayer(SPI1yMed13fal, colorbarOptions1, 'SPI1yMed13fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed13win,
  description: 'SPI1yMed13win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed13spr,
  description: 'SPI1yMed13spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed13sum,
  description: 'SPI1yMed13sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed13fal,
  description: 'SPI1yMed13fal',
  scale: 4000,
  region:Cimarron,
});

// //--------------------------------------------------------------------------------
// //Grass SPI 2014
var dS = '2014-01-01';
var dE = '2014-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y14 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2014').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2014
var cdl14 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2014-07-01', '2014-07-31'))// Get 2014 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl14') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass14 = cdl14.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

//// Create geometry from "maskedGrass"
var grass14geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass14geo);

// Land use type-specific SPI calcs
var SPI1y14GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2014-01-01', '2014-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y14GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2014-04-01', '2014-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y14GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2014-07-01', '2014-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y14GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2014-10-01', '2015-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph14win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y14GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph14win,SPI1y14GRASSwin,'grassSPI1yrgraph14win' );

var grassSPI1yrgraph14spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y14GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph14spr,SPI1y14GRASSspr,'grassSPI1yrgraph14spr' );

var grassSPI1yrgraph14sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y14GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph14sum,SPI1y14GRASSsum,'grassSPI1yrgraph14sum' );

var grassSPI1yrgraph14fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y14GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph14fal,SPI1y14GRASSfal,'grassSPI1yrgraph14fal' );

//Add SPI map layer
var SPI1yMed14win = SPI1y14GRASSwin.median();
Map.addLayer(SPI1yMed14win, colorbarOptions1, 'SPI1yMed14win');

var SPI1yMed14spr = SPI1y14GRASSspr.median();
Map.addLayer(SPI1yMed14spr, colorbarOptions1, 'SPI1yMed14spr');

var SPI1yMed14sum = SPI1y14GRASSsum.median();
Map.addLayer(SPI1yMed14sum, colorbarOptions1, 'SPI1yMed14sum');

var SPI1yMed14fal = SPI1y14GRASSfal.median();
Map.addLayer(SPI1yMed14fal, colorbarOptions1, 'SPI1yMed14fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed14win,
  description: 'SPI1yMed14win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed14spr,
  description: 'SPI1yMed14spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed14sum,
  description: 'SPI1yMed14sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed14fal,
  description: 'SPI1yMed14fal',
  scale: 4000,
  region:Cimarron,
});

// //--------------------------------------------------------------------------------Grass SPI 2015
var dS = '2015-01-01';
var dE = '2015-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y15 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2015').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2015
var cdl15 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2015-07-01', '2015-07-31'))// Get 2015 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl15') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass15 = cdl15.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass15geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass15geo);

// Land use type-specific SPI calcs
var SPI1y15GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2015-01-01', '2015-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y15GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2015-04-01', '2015-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y15GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2015-07-01', '2015-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y15GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2015-10-01', '2016-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph15win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y15GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph15win,SPI1y15GRASSwin,'grassSPI1yrgraph15win' );

var grassSPI1yrgraph15spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y15GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph15spr,SPI1y15GRASSspr,'grassSPI1yrgraph15spr' );

var grassSPI1yrgraph15sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y15GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph15sum,SPI1y15GRASSsum,'grassSPI1yrgraph15sum' );

var grassSPI1yrgraph15fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y15GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph15fal,SPI1y15GRASSfal,'grassSPI1yrgraph15fal' );


//Add SPI map layer
var SPI1yMed15win = SPI1y15GRASSwin.median();
Map.addLayer(SPI1yMed15win, colorbarOptions1, 'SPI1yMed15win');

var SPI1yMed15spr = SPI1y15GRASSspr.median();
Map.addLayer(SPI1yMed15spr, colorbarOptions1, 'SPI1yMed15spr');

var SPI1yMed15sum = SPI1y15GRASSsum.median();
Map.addLayer(SPI1yMed15sum, colorbarOptions1, 'SPI1yMed15sum');

var SPI1yMed15fal = SPI1y15GRASSfal.median();
Map.addLayer(SPI1yMed15fal, colorbarOptions1, 'SPI1yMed15fal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed15win,
  description: 'SPI1yMed15win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed15spr,
  description: 'SPI1yMed15spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed15sum,
  description: 'SPI1yMed15sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed15fal,
  description: 'SPI1yMed15fal',
  scale: 4000,
  region:Cimarron,
});
//----------------------------------------------------
// //Grass SPI 2016
var dS = '2016-01-01';
var dE = '2016-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y16 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2016').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2016
var cdl16 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2016-07-01', '2016-07-31'))// Get 2016 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl16') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass16 = cdl16.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass16geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass16geo);

// Land use type-specific SPI calcs
var SPI1y16GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2016-01-01', '2016-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y16GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2016-04-01', '2016-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y16GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2016-07-01', '2016-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y16GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2016-10-01', '2017-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph16win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y16GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph16win,SPI1y16GRASSwin,'grassSPI1yrgraph16win' );

var grassSPI1yrgraph16spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y16GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph16spr,SPI1y16GRASSspr,'grassSPI1yrgraph16spr' );

var grassSPI1yrgraph16sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y16GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph16sum,SPI1y16GRASSsum,'grassSPI1yrgraph16sum' );

var grassSPI1yrgraph16fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y16GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph16fal,SPI1y16GRASSfal,'grassSPI1yrgraph16fal' );

//Add SPI map layer
var SPI1yMed16win = SPI1y16GRASSwin.median();
Map.addLayer(SPI1yMed16win, colorbarOptions1, 'SPI1yMed16win');

var SPI1yMed16spr = SPI1y16GRASSspr.median();
Map.addLayer(SPI1yMed16spr, colorbarOptions1, 'SPI1yMed16spr');

var SPI1yMed16sum = SPI1y16GRASSsum.median();
Map.addLayer(SPI1yMed16sum, colorbarOptions1, 'SPI1yMed16sum');

var SPI1yMed16fal = SPI1y16GRASSfal.median();
Map.addLayer(SPI1yMed16fal, colorbarOptions1, 'SPI1yMed16fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed16win,
  description: 'SPI1yMed16win',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed16spr,
  description: 'SPI1yMed16spr',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed16sum,
  description: 'SPI1yMed16sum',
  scale: 4000,
  region:Cimarron,
});
//Export images
Export.image.toDrive({
  image: SPI1yMed16fal,
  description: 'SPI1yMed16fal',
  scale: 4000,
  region:Cimarron,
});

// //--------------------------------------------------------------------------Grass SPI 2017
var dS = '2017-01-01';
var dE = '2017-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y17 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2017').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2017
var cdl17 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2017-07-01', '2017-07-31'))// Get 2017 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl17') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass17 = cdl17.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass17geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass17geo);

// Land use type-specific SPI calcs
var SPI1y17GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2017-01-01', '2017-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y17GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2017-04-01', '2017-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y17GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2017-07-01', '2017-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y17GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2017-10-01', '2018-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph17win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y17GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph17win,SPI1y17GRASSwin,'grassSPI1yrgraph17win' );

var grassSPI1yrgraph17spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y17GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph17spr,SPI1y17GRASSspr,'grassSPI1yrgraph17spr' );

var grassSPI1yrgraph17sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y17GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph17sum,SPI1y17GRASSsum,'grassSPI1yrgraph17sum' );

var grassSPI1yrgraph17fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y17GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph17fal,SPI1y17GRASSfal,'grassSPI1yrgraph17fal' );

//Add SPI map layer
var SPI1yMed17win = SPI1y17GRASSwin.median();
Map.addLayer(SPI1yMed17win, colorbarOptions1, 'SPI1yMed17win');

var SPI1yMed17spr = SPI1y17GRASSspr.median();
Map.addLayer(SPI1yMed17spr, colorbarOptions1, 'SPI1yMed17spr');

var SPI1yMed17sum = SPI1y17GRASSsum.median();
Map.addLayer(SPI1yMed17sum, colorbarOptions1, 'SPI1yMed17sum');

var SPI1yMed17fal = SPI1y17GRASSfal.median();
Map.addLayer(SPI1yMed17fal, colorbarOptions1, 'SPI1yMed17fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed17win,
  description: 'SPI1yMed17win',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed17spr,
  description: 'SPI1yMed17spr',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed17sum,
  description: 'SPI1yMed17sum',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed17fal,
  description: 'SPI1yMed17fal',
  scale: 4000,
  region:Cimarron,
});

// //--------------------------------------------------------------------------------
// //Grass SPI 2018
var dS = '2018-01-01';
var dE = '2018-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y18 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2018').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2018
var cdl18 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2018-07-01', '2018-07-31'))// Get 2018 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl18') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass18 = cdl18.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass18geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass18geo);

// Land use type-specific SPI calcs
var SPI1y18GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2018-01-01', '2018-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y18GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2018-04-01', '2018-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y18GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2018-07-01', '2018-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y18GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2018-10-01', '2019-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph18win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y18GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph18win,SPI1y18GRASSwin,'grassSPI1yrgraph18win' );

var grassSPI1yrgraph18spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y18GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph18spr,SPI1y18GRASSspr,'grassSPI1yrgraph18spr' );

var grassSPI1yrgraph18sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y18GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph18sum,SPI1y18GRASSsum,'grassSPI1yrgraph18sum' );

var grassSPI1yrgraph18fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y18GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph18fal,SPI1y18GRASSfal,'grassSPI1yrgraph18fal' );

//Add SPI map layer
var SPI1yMed18win = SPI1y18GRASSwin.median();
Map.addLayer(SPI1yMed18win, colorbarOptions1, 'SPI1yMed18win');

var SPI1yMed18spr = SPI1y18GRASSspr.median();
Map.addLayer(SPI1yMed18spr, colorbarOptions1, 'SPI1yMed18spr');

var SPI1yMed18sum = SPI1y18GRASSsum.median();
Map.addLayer(SPI1yMed18sum, colorbarOptions1, 'SPI1yMed18sum');

var SPI1yMed18fal = SPI1y18GRASSfal.median();
Map.addLayer(SPI1yMed18fal, colorbarOptions1, 'SPI1yMed18fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed18win,
  description: 'SPI1yMed18win',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed18spr,
  description: 'SPI1yMed18spr',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed18sum,
  description: 'SPI1yMed18sum',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed18fal,
  description: 'SPI1yMed18fal',
  scale: 4000,
  region:Cimarron,
});

// //--------------------------------------------------------------------------Grass SPI 2019
var dS = '2019-01-01';
var dE = '2019-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y19 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2019').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2019
var cdl19 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2019-07-01', '2019-07-31'))// Get 2019 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl19') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass19 = cdl19.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass19geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass19geo);

// Land use type-specific SPI calcs
var SPI1y19GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2019-01-01', '2019-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y19GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2019-04-01', '2019-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y19GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2019-07-01', '2019-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y19GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2019-10-01', '2020-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph19win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y19GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph19win,SPI1y19GRASSwin,'grassSPI1yrgraph19win' );

var grassSPI1yrgraph19spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y19GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph19spr,SPI1y19GRASSspr,'grassSPI1yrgraph19spr' );

var grassSPI1yrgraph19sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y19GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph19sum,SPI1y19GRASSsum,'grassSPI1yrgraph19sum' );

var grassSPI1yrgraph19fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y19GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph19fal,SPI1y19GRASSfal,'grassSPI1yrgraph19fal' );

//Add SPI map layer
var SPI1yMed19win = SPI1y19GRASSwin.median();
Map.addLayer(SPI1yMed19win, colorbarOptions1, 'SPI1yMed19win');

var SPI1yMed19spr = SPI1y19GRASSspr.median();
Map.addLayer(SPI1yMed19spr, colorbarOptions1, 'SPI1yMed19spr');

var SPI1yMed19sum = SPI1y19GRASSsum.median();
Map.addLayer(SPI1yMed19sum, colorbarOptions1, 'SPI1yMed19sum');

var SPI1yMed19fal = SPI1y19GRASSfal.median();
Map.addLayer(SPI1yMed19fal, colorbarOptions1, 'SPI1yMed19fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed19win,
  description: 'SPI1yMed19win',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed19spr,
  description: 'SPI1yMed19spr',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed19sum,
  description: 'SPI1yMed19sum',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed19fal,
  description: 'SPI1yMed19fal',
  scale: 4000,
  region:Cimarron,
});

// //--------------------------------------------------------------------------------
// //Grass SPI 2020
var dS = '2020-01-01';
var dE = '2020-12-31';
var dSUTC = ee.Date(dS, 'GMT');
var dEUTC = ee.Date(dE, 'GMT');
var filtered = collection.filterDate(dSUTC, dEUTC.advance(1, 'year'));

var CimFiltered = filtered.filterBounds(Cimarron);

print(CimFiltered.aggregate_array('system:index'));

// Select 1yr SPI from dataset
var SPI1y20 = CimFiltered.select('spi1y');

// Create color palette and set ranges
var usdmColors = "0000aa,0000ff,00aaff,00ffff,aaff55,ffffff,ffff00,fcd37f,ffaa00,e60000,730000";
var minColorbar= -2.5;
var maxColorbar= 2.5;
var colorbarOptions1 = {
  'min':minColorbar,
  'max':maxColorbar,
  'palette': usdmColors
};

var cdl= ee.Image('USDA/NASS/CDL/2020').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var maskedGrass = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2020
var cdl20 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2020-07-01', '2020-07-31'))// Get 2020 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl20') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

var cdlGrass20 = cdl20.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass20geo = maskedGrass.reduceToVectors({
  geometry: Cimarron,
  scale: 4000,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass20geo);

// Land use type-specific SPI calcs
var SPI1y20GRASSwin = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2020-01-01', '2020-04-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y20GRASSspr = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2020-04-01', '2020-07-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y20GRASSsum = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2020-07-01', '2020-10-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});
var SPI1y20GRASSfal = CimFiltered.select('spi1y')
                .filter(ee.Filter.date('2020-10-01', '2021-01-01'))
                .filterBounds(Cimarron)
                .map(function(img) {return img.clip(Cimarron)});

var grassSPI1yrgraph20win = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y20GRASSwin,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph20win,SPI1y20GRASSwin,'grassSPI1yrgraph20win' );

var grassSPI1yrgraph20spr = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y20GRASSspr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph20spr,SPI1y20GRASSspr,'grassSPI1yrgraph20spr' );

var grassSPI1yrgraph20sum = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y20GRASSsum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph20sum,SPI1y20GRASSsum,'grassSPI1yrgraph20sum' );

var grassSPI1yrgraph20fal = ui.Chart.image.seriesByRegion({
  imageCollection: SPI1y20GRASSfal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(grassSPI1yrgraph20fal,SPI1y20GRASSfal,'grassSPI1yrgraph20fal' );

//Add SPI map layer
var SPI1yMed20win = SPI1y20GRASSwin.median();
Map.addLayer(SPI1yMed20win, colorbarOptions1, 'SPI1yMed20win');

var SPI1yMed20spr = SPI1y20GRASSspr.median();
Map.addLayer(SPI1yMed20spr, colorbarOptions1, 'SPI1yMed20spr');

var SPI1yMed20sum = SPI1y20GRASSsum.median();
Map.addLayer(SPI1yMed20sum, colorbarOptions1, 'SPI1yMed20sum');

var SPI1yMed20fal = SPI1y20GRASSfal.median();
Map.addLayer(SPI1yMed20fal, colorbarOptions1, 'SPI1yMed20fal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: SPI1yMed20win,
  description: 'SPI1yMed20win',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed20spr,
  description: 'SPI1yMed20spr',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed20sum,
  description: 'SPI1yMed20sum',
  scale: 4000,
  region:Cimarron,
});

Export.image.toDrive({
  image: SPI1yMed20fal,
  description: 'SPI1yMed20fal',
  scale: 4000,
  region:Cimarron,
});




/////////////////
///////////////////////////////
/////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






















//// EVI seasonal ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var Cimarron = ee.FeatureCollection(table)
    .filter("COUNTY_NAM == 'CIMARRON'")
    .geometry();
Map.addLayer(Cimarron);
Map.centerObject(Cimarron);


//var colorized = eviGrass06win.select('EVI');
var colorizedVis = {
  min: 0.0,
  max: 0.5,
  palette: ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'],
};

////---------------------------------------Extract EVI data from grasslands (2005)
var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2005
var cdl2005 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-01-01', '2006-12-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2005') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass05 = cdl2005.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass05geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass05geo);

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass05win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2005-01-01', '2005-04-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

var eviGrass05spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2005-04-01', '2005-07-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

var eviGrass05sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2005-07-01', '2005-10-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

var eviGrass05fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2005-10-01', '2006-01-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

//------------------------------------------------------//Make plot of grassland evi data 2005
var EVIgrass_05medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass05win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_05medianGraphWin,'EVIgrass_05medianGraphWin' )

var EVIgrass_05medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass05spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_05medianGraphSpr,'EVIgrass_05medianGraphSpr' )

var EVIgrass_05medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass05sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_05medianGraphSum,'EVIgrass_05medianGraphSum' )

var EVIgrass_05medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass05fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_05medianGraphFal,'EVIgrass_05medianGraphFal' )

//--------------------------------------------//Add map layer of median grass EVI
var grassEVI_05_medMapWin = eviGrass05win.median();
Map.addLayer(grassEVI_05_medMapWin, colorizedVis, 'grassEVI_05_medMapWin');

var grassEVI_05_medMapSpr = eviGrass05spr.median();
Map.addLayer(grassEVI_05_medMapSpr, colorizedVis, 'grassEVI_05_medMapSpr');

var grassEVI_05_medMapSum = eviGrass05sum.median();
Map.addLayer(grassEVI_05_medMapSum, colorizedVis, 'grassEVI_05_medMapSum');

var grassEVI_05_medMapFal = eviGrass05fal.median();
Map.addLayer(grassEVI_05_medMapFal, colorizedVis, 'grassEVI_05_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_05_medValWin = grassEVI_05_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_05_medValWin,'grassEVI_05_medValWin');

var grassEVI_05_medValSpr = grassEVI_05_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_05_medValSpr,'grassEVI_05_medValSpr');

var grassEVI_05_medValSum = grassEVI_05_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_05_medValSum,'grassEVI_05_medValSum');

var grassEVI_05_medValFal = grassEVI_05_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_05_medValFal,'grassEVI_05_medValFal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_05_medMapWin,
  description: 'grassEVIwin05',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_05_medMapSpr,
  description: 'grassEVIspr05',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_05_medMapSum,
  description: 'grassEVIsum05',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_05_medMapFal,
  description: 'grassEVIfal05',
  scale: 30,
  region:Cimarron,
});

////---------------------------------------Extract EVI data from grasslands (2006)
var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2006
var cdl2006 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-01-01', '2006-12-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2006') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass06 = cdl2006.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass06geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass06geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass06win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2006-01-01', '2006-04-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

var eviGrass06spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2006-04-01', '2006-07-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

var eviGrass06sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2006-07-01', '2006-10-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

var eviGrass06fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2006-10-01', '2007-01-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

//------------------------------------------------------//Make plot of grassland evi data 2006
var EVIgrass_06medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass06win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_06medianGraphWin,'EVIgrass_06medianGraphWin' )

var EVIgrass_06medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass06spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_06medianGraphSpr,'EVIgrass_06medianGraphSpr' )

var EVIgrass_06medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass06sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_06medianGraphSum,'EVIgrass_06medianGraphSum' )

var EVIgrass_06medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass06fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_06medianGraphFal,'EVIgrass_06medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_06_medMapWin = eviGrass06win.median();
Map.addLayer(grassEVI_06_medMapWin, colorizedVis, 'grassEVI_06_medMapWin');

var grassEVI_06_medMapSpr = eviGrass06spr.median();
Map.addLayer(grassEVI_06_medMapSpr, colorizedVis, 'grassEVI_06_medMapSpr');

var grassEVI_06_medMapSum = eviGrass06sum.median();
Map.addLayer(grassEVI_06_medMapSum, colorizedVis, 'grassEVI_06_medMapSum');

var grassEVI_06_medMapFal = eviGrass06fal.median();
Map.addLayer(grassEVI_06_medMapFal, colorizedVis, 'grassEVI_06_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_06_medValWin = grassEVI_06_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_06_medValWin,'grassEVI_06_medValWin');

var grassEVI_06_medValSpr = grassEVI_06_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_06_medValSpr,'grassEVI_06_medValSpr');

var grassEVI_06_medValSum = grassEVI_06_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_06_medValSum,'grassEVI_06_medValSum');

var grassEVI_06_medValFal = grassEVI_06_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_06_medValFal,'grassEVI_06_medValFal');

////------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_06_medMapWin,
  description: 'grassEVIwin06',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_06_medMapSpr,
  description: 'grassEVIspr06',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_06_medMapSum,
  description: 'grassEVIsum06',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_06_medMapFal,
  description: 'grassEVIfal06',
  scale: 30,
  region:Cimarron,
});

//-----------------------------------Extract EVI data from grasslands (2007)
var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2007
var cdl2007 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-01-01', '2006-12-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2007') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass07 = cdl2007.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass07geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass07geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass07win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2007-01-01', '2007-04-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

var eviGrass07spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2007-04-01', '2007-07-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

var eviGrass07sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2007-07-01', '2007-10-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

var eviGrass07fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2007-10-01', '2008-01-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

//------------------------------------------------------//Make plot of grassland evi data 2007
var EVIgrass_07medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass07win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_07medianGraphWin,'EVIgrass_07medianGraphWin' )

var EVIgrass_07medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass07spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_07medianGraphSpr,'EVIgrass_07medianGraphSpr' )

var EVIgrass_07medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass07sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_07medianGraphSum,'EVIgrass_07medianGraphSum' )

var EVIgrass_07medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass07fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_07medianGraphFal,'EVIgrass_07medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_07_medMapWin = eviGrass07win.median();
Map.addLayer(grassEVI_07_medMapWin, colorizedVis, 'grassEVI_07_medMapWin');

var grassEVI_07_medMapSpr = eviGrass07spr.median();
Map.addLayer(grassEVI_07_medMapSpr, colorizedVis, 'grassEVI_07_medMapSpr');

var grassEVI_07_medMapSum = eviGrass07sum.median();
Map.addLayer(grassEVI_07_medMapSum, colorizedVis, 'grassEVI_07_medMapSum');

var grassEVI_07_medMapFal = eviGrass07fal.median();
Map.addLayer(grassEVI_07_medMapFal, colorizedVis, 'grassEVI_07_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_07_medValWin = grassEVI_07_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_07_medValWin,'grassEVI_07_medValWin');

var grassEVI_07_medValSpr = grassEVI_07_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_07_medValSpr,'grassEVI_07_medValSpr');

var grassEVI_07_medValSum = grassEVI_07_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_07_medValSum,'grassEVI_07_medValSum');

var grassEVI_07_medValFal = grassEVI_07_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_07_medValFal,'grassEVI_07_medValFal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_07_medMapWin,
  description: 'grassEVIwin07',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_07_medMapSpr,
  description: 'grassEVIspr07',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_07_medMapSum,
  description: 'grassEVIsum07',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_07_medMapFal,
  description: 'grassEVIfal07',
  scale: 30,
  region:Cimarron,
});

//-----------------------------------Extract EVI data from grasslands (2008)
var cdl= ee.Image('USDA/NASS/CDL/2008').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2008
var cdl2008 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2008-01-01', '2008-12-31'))// Get 2008 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2008') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass08 = cdl2008.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass08geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass08geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass08win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2008-01-01', '2008-04-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});
var eviGrass08spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2008-04-01', '2008-07-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});
var eviGrass08sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2008-07-01', '2008-10-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});
var eviGrass08fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2008-10-01', '2009-01-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});

//------------------------------------------------------//Make plot of grassland evi data 2008
var EVIgrass_08medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass08win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_08medianGraphWin,'EVIgrass_08medianGraphWin' )

var EVIgrass_08medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass08spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_08medianGraphSpr,'EVIgrass_08medianGraphSpr' )

var EVIgrass_08medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass08sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_08medianGraphSum,'EVIgrass_08medianGraphSum' )

var EVIgrass_08medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass08fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_08medianGraphFal,'EVIgrass_08medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_08_medMapWin = eviGrass08win.median();
Map.addLayer(grassEVI_08_medMapWin, colorizedVis, 'grassEVI_08_medMapWin');

var grassEVI_08_medMapSpr = eviGrass08spr.median();
Map.addLayer(grassEVI_08_medMapSpr, colorizedVis, 'grassEVI_08_medMapSpr');

var grassEVI_08_medMapSum = eviGrass08sum.median();
Map.addLayer(grassEVI_08_medMapSum, colorizedVis, 'grassEVI_08_medMapSum');

var grassEVI_08_medMapFal = eviGrass08fal.median();
Map.addLayer(grassEVI_08_medMapFal, colorizedVis, 'grassEVI_08_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_08_medValWin = grassEVI_08_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_08_medValWin,'grassEVI_08_medValWin');

var grassEVI_08_medValSpr = grassEVI_08_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_08_medValSpr,'grassEVI_08_medValSpr');

var grassEVI_08_medValSum = grassEVI_08_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_08_medValSum,'grassEVI_08_medValSum');

var grassEVI_08_medValFal = grassEVI_08_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_08_medValFal,'grassEVI_08_medValFal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_08_medMapWin,
  description: 'grassEVIwin08',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_08_medMapSpr,
  description: 'grassEVIspr08',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_08_medMapSum,
  description: 'grassEVIsum08',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_08_medMapFal,
  description: 'grassEVIfal08',
  scale: 30,
  region:Cimarron,
});

//-----------------------------------Extract EVI data from grasslands (2009)
var cdl= ee.Image('USDA/NASS/CDL/2009').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2009
var cdl2009 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2009-01-01', '2009-12-31'))// Get 2009 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2009') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass09 = cdl2009.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass09geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass09geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass09win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2009-01-01', '2009-04-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});
var eviGrass09spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2009-04-01', '2009-07-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});
var eviGrass09sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2009-07-01', '2009-10-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});
var eviGrass09fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2009-10-01', '2010-01-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});

//------------------------------------------------------//Make plot of grassland evi data 2009
var EVIgrass_09medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass09win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_09medianGraphWin,'EVIgrass_09medianGraphWin' )

var EVIgrass_09medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass09spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_09medianGraphSpr,'EVIgrass_09medianGraphSpr' )

var EVIgrass_09medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass09sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_09medianGraphSum,'EVIgrass_09medianGraphSum' )

var EVIgrass_09medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass09fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_09medianGraphFal,'EVIgrass_09medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_09_medMapWin = eviGrass09win.median();
Map.addLayer(grassEVI_09_medMapWin, colorizedVis, 'grassEVI_09_medMapWin');

var grassEVI_09_medMapSpr = eviGrass09spr.median();
Map.addLayer(grassEVI_09_medMapSpr, colorizedVis, 'grassEVI_09_medMapSpr');

var grassEVI_09_medMapSum = eviGrass09sum.median();
Map.addLayer(grassEVI_09_medMapSum, colorizedVis, 'grassEVI_09_medMapSum');

var grassEVI_09_medMapFal = eviGrass09fal.median();
Map.addLayer(grassEVI_09_medMapFal, colorizedVis, 'grassEVI_09_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_09_medValWin = grassEVI_09_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_09_medValWin,'grassEVI_09_medValWin');

var grassEVI_09_medValSpr = grassEVI_09_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_09_medValSpr,'grassEVI_09_medValSpr');

var grassEVI_09_medValSum = grassEVI_09_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_09_medValSum,'grassEVI_09_medValSum');

var grassEVI_09_medValFal = grassEVI_09_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_09_medValFal,'grassEVI_09_medValFal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_09_medMapWin,
  description: 'grassEVIwin09',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_09_medMapSpr,
  description: 'grassEVIspr09',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_09_medMapSum,
  description: 'grassEVIsum09',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_09_medMapFal,
  description: 'grassEVIfal09',
  scale: 30,
  region:Cimarron,
});

//-----------------------------------Extract EVI data from grasslands (2010)
var cdl= ee.Image('USDA/NASS/CDL/2010').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2010
var cdl2010 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2010-01-01', '2010-12-31'))// Get 2010 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2010') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass10 = cdl2010.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "maskedGrass"
var grass10geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass10geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass10win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2010-01-01', '2010-04-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});
var eviGrass10spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2010-04-01', '2010-07-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});
var eviGrass10sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2010-07-01', '2010-10-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});
var eviGrass10fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2010-10-01', '2011-01-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});

//------------------------------------------------------//Make plot of grassland evi data 2010
var EVIgrass_10medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass10win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_10medianGraphWin,'EVIgrass_10medianGraphWin' )

var EVIgrass_10medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass10spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_10medianGraphSpr,'EVIgrass_10medianGraphSpr' )

var EVIgrass_10medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass10sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_10medianGraphSum,'EVIgrass_10medianGraphSum' );

var EVIgrass_10medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass10fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
});
print(EVIgrass_10medianGraphFal,'EVIgrass_10medianGraphFal' );

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_10_medMapWin = eviGrass10win.median();
Map.addLayer(grassEVI_10_medMapWin, colorizedVis, 'grassEVI_10_medMapWin');

var grassEVI_10_medMapSpr = eviGrass10spr.median();
Map.addLayer(grassEVI_10_medMapSpr, colorizedVis, 'grassEVI_10_medMapSpr');

var grassEVI_10_medMapSum = eviGrass10sum.median();
Map.addLayer(grassEVI_10_medMapSum, colorizedVis, 'grassEVI_10_medMapSum');

var grassEVI_10_medMapFal = eviGrass10fal.median();
Map.addLayer(grassEVI_10_medMapFal, colorizedVis, 'grassEVI_10_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_10_medValWin = grassEVI_10_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_10_medValWin,'grassEVI_10_medValWin');

var grassEVI_10_medValSpr = grassEVI_10_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_10_medValSpr,'grassEVI_10_medValSpr');

var grassEVI_10_medValSum = grassEVI_10_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_10_medValSum,'grassEVI_10_medValSum');

var grassEVI_10_medValFal = grassEVI_10_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_10_medValFal,'grassEVI_10_medValFal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_10_medMapWin,
  description: 'grassEVIwin10',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_10_medMapSpr,
  description: 'grassEVIspr10',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_10_medMapSum,
  description: 'grassEVIsum10',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_10_medMapFal,
  description: 'grassEVIfal10',
  scale: 30,
  region:Cimarron,
});

////----------------------------------------------Extract EVI data from grasslands (2011)
var cdl= ee.Image('USDA/NASS/CDL/2011').select('cropland').clip(Cimarron);

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) );

// CDL data 2011
var cdl2011 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2011-01-01', '2011-12-31'))// Get 2011 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2011') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass11 = cdl2011.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass11geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass11geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass11win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2011-01-01', '2011-04-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});
var eviGrass11spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2011-04-01', '2011-07-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});
var eviGrass11sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2011-07-01', '2011-10-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});
var eviGrass11fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2011-10-01', '2012-01-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});

//------------------------------------------------------//Make plot of grassland evi data 2011
var EVIgrass_11medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass11win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_11medianGraphWin,'EVIgrass_11medianGraphWin' )

var EVIgrass_11medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass11spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_11medianGraphSpr,'EVIgrass_11medianGraphSpr' )

var EVIgrass_11medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass11sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_11medianGraphSum,'EVIgrass_11medianGraphSum' )

var EVIgrass_11medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass11fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_11medianGraphFal,'EVIgrass_11medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_11_medMapWin = eviGrass11win.median();
Map.addLayer(grassEVI_11_medMapWin, colorizedVis, 'grassEVI_11_medMapWin');

var grassEVI_11_medMapSpr = eviGrass11spr.median();
Map.addLayer(grassEVI_11_medMapSpr, colorizedVis, 'grassEVI_11_medMapSpr');

var grassEVI_11_medMapSum = eviGrass11sum.median();
Map.addLayer(grassEVI_11_medMapSum, colorizedVis, 'grassEVI_11_medMapSum');

var grassEVI_11_medMapFal = eviGrass11fal.median();
Map.addLayer(grassEVI_11_medMapFal, colorizedVis, 'grassEVI_11_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_11_medValWin = grassEVI_11_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_11_medValWin,'grassEVI_11_medValWin');

var grassEVI_11_medValSpr = grassEVI_11_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_11_medValSpr,'grassEVI_11_medValSpr');

var grassEVI_11_medValSum = grassEVI_11_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_11_medValSum,'grassEVI_11_medValSum');

var grassEVI_11_medValFal = grassEVI_11_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_11_medValFal,'grassEVI_11_medValFal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_11_medMapWin,
  description: 'grassEVIwin11',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_11_medMapSpr,
  description: 'grassEVIspr11',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_11_medMapSum,
  description: 'grassEVIsum11',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_11_medMapFal,
  description: 'grassEVIfal11',
  scale: 30,
  region:Cimarron,
});

////-----------------------------------------Extract EVI data from grasslands (2012)
var cdl= ee.Image('USDA/NASS/CDL/2012').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2012
var cdl2012 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2012-01-01', '2012-12-31'))// Get 2012 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2012') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass12 = cdl2012.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass12geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass12geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass12win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2012-01-01', '2012-04-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

var eviGrass12spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2012-04-01', '2012-07-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

var eviGrass12sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2012-07-01', '2012-10-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

var eviGrass12fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2012-10-01', '2013-01-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

//------------------------------------------------------//Make plot of grassland evi data 2012
var EVIgrass_12medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass12win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_12medianGraphWin,'EVIgrass_12medianGraphWin' )

var EVIgrass_12medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass12spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_12medianGraphSpr,'EVIgrass_12medianGraphSpr' )

var EVIgrass_12medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass12sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_12medianGraphFal,'EVIgrass_12medianGraphFal' )

var EVIgrass_12medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass12fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_12medianGraphFal,'EVIgrass_12medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_12_medMapWin = eviGrass12win.median();
Map.addLayer(grassEVI_12_medMapWin, colorizedVis, 'grassEVI_12_medMapWin');

var grassEVI_12_medMapSpr = eviGrass12spr.median();
Map.addLayer(grassEVI_12_medMapSpr, colorizedVis, 'grassEVI_12_medMapSpr');

var grassEVI_12_medMapSum = eviGrass12sum.median();
Map.addLayer(grassEVI_12_medMapSum, colorizedVis, 'grassEVI_12_medMapSum');

var grassEVI_12_medMapFal = eviGrass12fal.median();
Map.addLayer(grassEVI_12_medMapFal, colorizedVis, 'grassEVI_12_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_12_medValWin = grassEVI_12_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_12_medValWin,'grassEVI_12_medValWin');

var grassEVI_12_medValSpr = grassEVI_12_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_12_medValSpr,'grassEVI_12_medValSpr');

var grassEVI_12_medValSum = grassEVI_12_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_12_medValSum,'grassEVI_12_medValSum');

var grassEVI_12_medValFal = grassEVI_12_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_12_medValFal,'grassEVI_12_medValFal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_12_medMapWin,
  description: 'grassEVIwin12',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_12_medMapSpr,
  description: 'grassEVIspr12',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_12_medMapSum,
  description: 'grassEVIsum12',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_12_medMapFal,
  description: 'grassEVIfal12',
  scale: 30,
  region:Cimarron,
});

////----------------------------------------------Extract EVI data from grasslands (2013)
var cdl= ee.Image('USDA/NASS/CDL/2013').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2013
var cdl2013 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2013-01-01', '2013-12-31'))// Get 2013 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2013') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass13 = cdl2013.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass13geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass13geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass13win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2013-01-01', '2013-04-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

var eviGrass13spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2013-04-01', '2013-07-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

var eviGrass13sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2013-07-01', '2013-10-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

var eviGrass13fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2013-10-01', '2014-01-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

//------------------------------------------------------//Make plot of grassland evi data 2013
var EVIgrass_13medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass13win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_13medianGraphWin,'EVIgrass_13medianGraphWin' )

var EVIgrass_13medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass13spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_13medianGraphSpr,'EVIgrass_13medianGraphSpr' )

var EVIgrass_13medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass13sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_13medianGraphSum,'EVIgrass_13medianGraphSum' )

var EVIgrass_13medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass13fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_13medianGraphFal,'EVIgrass_13medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_13_medMapWin = eviGrass13win.median();
Map.addLayer(grassEVI_13_medMapWin, colorizedVis, 'grassEVI_13_medMapWin');

var grassEVI_13_medMapSpr = eviGrass13spr.median();
Map.addLayer(grassEVI_13_medMapSpr, colorizedVis, 'grassEVI_13_medMapSpr');

var grassEVI_13_medMapSum = eviGrass13sum.median();
Map.addLayer(grassEVI_13_medMapSum, colorizedVis, 'grassEVI_13_medMapSum');

var grassEVI_13_medMapFal = eviGrass13fal.median();
Map.addLayer(grassEVI_13_medMapFal, colorizedVis, 'grassEVI_13_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_13_medValWin = grassEVI_13_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_13_medValWin,'grassEVI_13_medValWin');

var grassEVI_13_medValSpr = grassEVI_13_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_13_medValSpr,'grassEVI_13_medValSpr');

var grassEVI_13_medValSum = grassEVI_13_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_13_medValSum,'grassEVI_13_medValSum');

var grassEVI_13_medValFal = grassEVI_13_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_13_medValFal,'grassEVI_13_medValFal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_13_medMapWin,
  description: 'grassEVIwin13',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_13_medMapSpr,
  description: 'grassEVIspr13',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_13_medMapSum,
  description: 'grassEVIsum13',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_13_medMapFal,
  description: 'grassEVIfal13',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------------------------------Extract EVI data from grasslands (2014)
var cdl= ee.Image('USDA/NASS/CDL/2014').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2014
var cdl2014 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2014-01-01', '2014-12-31'))// Get 2014 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2014') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass14 = cdl2014.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass14geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass14geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass14win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2014-01-01', '2014-04-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

var eviGrass14spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2014-04-01', '2014-07-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

var eviGrass14sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2014-07-01', '2014-10-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

var eviGrass14fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2014-10-01', '2015-01-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

//------------------------------------------------------//Make plot of grassland evi data 2014
var EVIgrass_14medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass14win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_14medianGraphWin,'EVIgrass_14medianGraphWin' )

var EVIgrass_14medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass14spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_14medianGraphSpr,'EVIgrass_14medianGraphSpr' )

var EVIgrass_14medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass14sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_14medianGraphSum,'EVIgrass_14medianGraphFalSum' )

var EVIgrass_14medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass14fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_14medianGraphFal,'EVIgrass_14medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_14_medMapWin = eviGrass14win.median();
Map.addLayer(grassEVI_14_medMapWin, colorizedVis, 'grassEVI_14_medMapWin');

var grassEVI_14_medMapSpr = eviGrass14spr.median();
Map.addLayer(grassEVI_14_medMapSpr, colorizedVis, 'grassEVI_14_medMapSpr');

var grassEVI_14_medMapSum = eviGrass14sum.median();
Map.addLayer(grassEVI_14_medMapSum, colorizedVis, 'grassEVI_14_medMapSum');

var grassEVI_14_medMapFal = eviGrass14fal.median();
Map.addLayer(grassEVI_14_medMapFal, colorizedVis, 'grassEVI_14_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_14_medValWin = grassEVI_14_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_14_medValWin,'grassEVI_14_medValWin');

var grassEVI_14_medValSpr = grassEVI_14_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_14_medValSpr,'grassEVI_14_medValSpr');

var grassEVI_14_medValSum = grassEVI_14_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_14_medValSum,'grassEVI_14_medValSum');

var grassEVI_14_medValFal = grassEVI_14_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_14_medValFal,'grassEVI_14_medValFal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_14_medMapWin,
  description: 'grassEVIwin14',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_14_medMapSpr,
  description: 'grassEVIspr14',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_14_medMapSum,
  description: 'grassEVIsum14',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_14_medMapFal,
  description: 'grassEVIfal14',
  scale: 30,
  region:Cimarron,
});

////----------------------------------------------Extract EVI data from grasslands (2015)
var cdl= ee.Image('USDA/NASS/CDL/2015').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2015
var cdl2015 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2015-01-01', '2015-12-31'))// Get 2015 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2015') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass15 = cdl2015.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass15geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass15geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass15win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2015-01-01', '2015-04-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

var eviGrass15spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2015-04-01', '2015-07-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

var eviGrass15sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2015-07-01', '2015-10-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

var eviGrass15fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2015-10-01', '2016-01-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

//------------------------------------------------------//Make plot of grassland evi data 2015
var EVIgrass_15medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass15win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_15medianGraphWin,'EVIgrass_15medianGraphWin' )

var EVIgrass_15medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass15spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_15medianGraphSpr,'EVIgrass_15medianGraphSpr' )

var EVIgrass_15medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass15sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_15medianGraphSum,'EVIgrass_15medianGraphSum' )

var EVIgrass_15medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass15fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_15medianGraphFal,'EVIgrass_15medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_15_medMapWin = eviGrass15win.median();
Map.addLayer(grassEVI_15_medMapWin, colorizedVis, 'grassEVI_15_medMapWin');

var grassEVI_15_medMapSpr = eviGrass15spr.median();
Map.addLayer(grassEVI_15_medMapSpr, colorizedVis, 'grassEVI_15_medMapSpr');

var grassEVI_15_medMapSum = eviGrass15sum.median();
Map.addLayer(grassEVI_15_medMapSum, colorizedVis, 'grassEVI_15_medMapSum');

var grassEVI_15_medMapFal = eviGrass15fal.median();
Map.addLayer(grassEVI_15_medMapFal, colorizedVis, 'grassEVI_15_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_15_medValWin = grassEVI_15_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_15_medValWin,'grassEVI_15_medValWin');

var grassEVI_15_medValSpr = grassEVI_15_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_15_medValSpr,'grassEVI_15_medValSpr');

var grassEVI_15_medValSum = grassEVI_15_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_15_medValSum,'grassEVI_15_medValSum');

var grassEVI_15_medValFal = grassEVI_15_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_15_medValFal,'grassEVI_15_medValFal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_15_medMapWin,
  description: 'grassEVIwin15',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_15_medMapSpr,
  description: 'grassEVIspr15',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_15_medMapSum,
  description: 'grassEVIsum15',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_15_medMapFal,
  description: 'grassEVIfal15',
  scale: 30,
  region:Cimarron,
});

////----------------------------------------------Extract EVI data from grasslands (2016)
var cdl= ee.Image('USDA/NASS/CDL/2016').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2016
var cdl2016 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2016-01-01', '2016-12-31'))// Get 2016 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2016') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass16 = cdl2016.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass16geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass16geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass16win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2016-01-01', '2016-04-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

var eviGrass16spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2016-04-01', '2016-07-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

var eviGrass16sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2016-07-01', '2016-10-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

var eviGrass16fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2016-10-01', '2017-01-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

//------------------------------------------------------//Make plot of grassland evi data 2016
var EVIgrass_16medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass16win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_16medianGraphWin,'EVIgrass_16medianGraphWin' )

var EVIgrass_16medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass16spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_16medianGraphSpr,'EVIgrass_16medianGraphSpr' )

var EVIgrass_16medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass16sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_16medianGraphSum,'EVIgrass_16medianGraphSum' )

var EVIgrass_16medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass16fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_16medianGraphFal,'EVIgrass_16medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_16_medMapWin = eviGrass16win.median();
Map.addLayer(grassEVI_16_medMapWin, colorizedVis, 'grassEVI_16_medMapWin');

var grassEVI_16_medMapSpr = eviGrass16spr.median();
Map.addLayer(grassEVI_16_medMapSpr, colorizedVis, 'grassEVI_16_medMapSpr');

var grassEVI_16_medMapSum = eviGrass16sum.median();
Map.addLayer(grassEVI_16_medMapSum, colorizedVis, 'grassEVI_16_medMapSum');

var grassEVI_16_medMapFal = eviGrass16fal.median();
Map.addLayer(grassEVI_16_medMapFal, colorizedVis, 'grassEVI_16_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_16_medValWin = grassEVI_16_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_16_medValWin,'grassEVI_16_medValWin');

var grassEVI_16_medValSpr = grassEVI_16_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_16_medValSpr,'grassEVI_16_medValSpr');

var grassEVI_16_medValSum = grassEVI_16_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_16_medValSum,'grassEVI_16_medValSum');

var grassEVI_16_medValFal = grassEVI_16_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_16_medValFal,'grassEVI_16_medValFal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_16_medMapWin,
  description: 'grassEVIwin16',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_16_medMapSpr,
  description: 'grassEVIspr16',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_16_medMapSum,
  description: 'grassEVIsum16',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_16_medMapFal,
  description: 'grassEVIfal16',
  scale: 30,
  region:Cimarron,
});

////------------------------------------------------------Extract EVI data from grasslands (2017)
var cdl= ee.Image('USDA/NASS/CDL/2017').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2017
var cdl2017 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2017-01-01', '2017-12-31'))// Get 2017 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2017') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass17 = cdl2017.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass17geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass17geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass17win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2017-01-01', '2017-04-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

var eviGrass17spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2017-04-01', '2017-07-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

var eviGrass17sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2017-07-01', '2017-10-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

var eviGrass17fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2017-10-01', '2018-01-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

//------------------------------------------------------//Make plot of grassland evi data 2017
var EVIgrass_17medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass17win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_17medianGraphWin,'EVIgrass_17medianGraphWin' )

var EVIgrass_17medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass17spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_17medianGraphSpr,'EVIgrass_17medianGraphSpr' )

var EVIgrass_17medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass17sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_17medianGraphSum,'EVIgrass_17medianGraphSum' )

var EVIgrass_17medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass17fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_17medianGraphFal,'EVIgrass_17medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_17_medMapWin = eviGrass17win.median();
Map.addLayer(grassEVI_17_medMapWin, colorizedVis, 'grassEVI_17_medMapWin');

var grassEVI_17_medMapSpr = eviGrass17spr.median();
Map.addLayer(grassEVI_17_medMapSpr, colorizedVis, 'grassEVI_17_medMapSpr');

var grassEVI_17_medMapSum = eviGrass17sum.median();
Map.addLayer(grassEVI_17_medMapSum, colorizedVis, 'grassEVI_17_medMapSum');

var grassEVI_17_medMapFal = eviGrass17fal.median();
Map.addLayer(grassEVI_17_medMapFal, colorizedVis, 'grassEVI_17_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_17_medValWin = grassEVI_17_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_17_medValWin,'grassEVI_17_medValWin');

var grassEVI_17_medValSpr = grassEVI_17_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_17_medValSpr,'grassEVI_17_medValSpr');

var grassEVI_17_medValSum = grassEVI_17_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_17_medValSum,'grassEVI_17_medValSum');

var grassEVI_17_medValFal = grassEVI_17_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_17_medValFal,'grassEVI_17_medValFal');

//------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_17_medMapWin,
  description: 'grassEVIwin17',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_17_medMapSpr,
  description: 'grassEVIspr17',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_17_medMapSum,
  description: 'grassEVIsum17',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_17_medMapFal,
  description: 'grassEVIfal17',
  scale: 30,
  region:Cimarron,
});

////---------------------------------------------Extract EVI data from grasslands (2018)
var cdl= ee.Image('USDA/NASS/CDL/2018').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2018
var cdl2018 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2018-01-01', '2018-12-31'))// Get 2018 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2018') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass18 = cdl2018.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass18geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass18geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass18win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2018-01-01', '2018-04-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

var eviGrass18spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2018-04-01', '2018-07-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

var eviGrass18sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2018-07-01', '2018-10-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

var eviGrass18fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2018-10-01', '2019-01-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

//------------------------------------------------------//Make plot of grassland evi data 2018
var EVIgrass_18medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass18win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_18medianGraphWin,'EVIgrass_18medianGraphWin' )

var EVIgrass_18medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass18spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_18medianGraphSpr,'EVIgrass_18medianGraphSpr' )

var EVIgrass_18medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass18sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_18medianGraphSum,'EVIgrass_18medianGraphSum' )

var EVIgrass_18medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass18fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_18medianGraphFal,'EVIgrass_18medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_18_medMapWin = eviGrass18win.median();
Map.addLayer(grassEVI_18_medMapWin, colorizedVis, 'grassEVI_18_medMapWin');

var grassEVI_18_medMapSpr = eviGrass18spr.median();
Map.addLayer(grassEVI_18_medMapSpr, colorizedVis, 'grassEVI_18_medMapSpr');

var grassEVI_18_medMapSum = eviGrass18sum.median();
Map.addLayer(grassEVI_18_medMapSum, colorizedVis, 'grassEVI_18_medMapSum');

var grassEVI_18_medMapFal = eviGrass18fal.median();
Map.addLayer(grassEVI_18_medMapFal, colorizedVis, 'grassEVI_18_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_18_medValWin = grassEVI_18_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_18_medValWin,'grassEVI_18_medValWin');

var grassEVI_18_medValSpr = grassEVI_18_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_18_medValSpr,'grassEVI_18_medValSpr');

var grassEVI_18_medValSum = grassEVI_18_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_18_medValSum,'grassEVI_18_medValSum');

var grassEVI_18_medValFal = grassEVI_18_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_18_medValFal,'grassEVI_18_medValFal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_18_medMapWin,
  description: 'grassEVIwin18',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_18_medMapSpr,
  description: 'grassEVIspr18',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_18_medMapSum,
  description: 'grassEVIsum18',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_18_medMapFal,
  description: 'grassEVIfal18',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract EVI data from grasslands (2019)
var cdl= ee.Image('USDA/NASS/CDL/2019').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2019
var cdl2019 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2019-01-01', '2019-12-31'))// Get 2019 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2019') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass19 = cdl2019.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass19geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass19geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass19win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2019-01-01', '2019-04-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

var eviGrass19spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2019-04-01', '2019-07-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

var eviGrass19sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2019-07-01', '2019-10-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

var eviGrass19fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2019-10-01', '2020-01-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

//------------------------------------------------------//Make plot of grassland evi data 2019
var EVIgrass_19medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass19win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_19medianGraphWin,'EVIgrass_19medianGraphWin' )

var EVIgrass_19medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass19spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_19medianGraphSpr,'EVIgrass_19medianGraphSpr' )

var EVIgrass_19medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass19sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_19medianGraphSum,'EVIgrass_19medianGraphSum' )

var EVIgrass_19medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass19fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_19medianGraphFal,'EVIgrass_19medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_19_medMapWin = eviGrass19win.median();
Map.addLayer(grassEVI_19_medMapWin, colorizedVis, 'grassEVI_19_medMapWin');

var grassEVI_19_medMapSpr = eviGrass19spr.median();
Map.addLayer(grassEVI_19_medMapSpr, colorizedVis, 'grassEVI_19_medMapSpr');

var grassEVI_19_medMapSum = eviGrass19sum.median();
Map.addLayer(grassEVI_19_medMapSum, colorizedVis, 'grassEVI_19_medMapSum');

var grassEVI_19_medMapFal = eviGrass19fal.median();
Map.addLayer(grassEVI_19_medMapFal, colorizedVis, 'grassEVI_19_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_19_medValWin = grassEVI_19_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_19_medValWin,'grassEVI_19_medValWin');

var grassEVI_19_medValSpr = grassEVI_19_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_19_medValSpr,'grassEVI_19_medValSpr');

var grassEVI_19_medValSum = grassEVI_19_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_19_medValSum,'grassEVI_19_medValSum');

var grassEVI_19_medValFal = grassEVI_19_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_19_medValFal,'grassEVI_19_medValFal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_19_medMapWin,
  description: 'grassEVIwin19',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_19_medMapSpr,
  description: 'grassEVIspr19',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_19_medMapSum,
  description: 'grassEVIsum19',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_19_medMapFal,
  description: 'grassEVIfal19',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------Extract EVI data from grasslands (2020)
var cdl= ee.Image('USDA/NASS/CDL/2020').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2020
var cdl2020 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2020-01-01', '2020-12-31'))// Get 2020 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2020') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass20 = cdl2020.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass20geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass20geo)

//-------------------------------------------------------// EVI seasonal calcs
var eviGrass20win = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2020-01-01', '2020-04-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

var eviGrass20spr = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2020-04-01', '2020-07-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

var eviGrass20sum = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2020-07-01', '2020-10-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

var eviGrass20fal = ee.ImageCollection('LANDSAT/LE07/C01/T1_8DAY_EVI')
                .filter(ee.Filter.date('2020-10-01', '2021-01-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

//------------------------------------------------------//Make plot of grassland evi data 2020
var EVIgrass_20medianGraphWin = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass20win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_20medianGraphWin,'EVIgrass_20medianGraphWin' )

var EVIgrass_20medianGraphSpr = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass20spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_20medianGraphSpr,'EVIgrass_20medianGraphSpr' )

var EVIgrass_20medianGraphSum = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass20sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_20medianGraphSum,'EVIgrass_20medianGraphSum' )

var EVIgrass_20medianGraphFal = ui.Chart.image.seriesByRegion({
  imageCollection: eviGrass20fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
})
print(EVIgrass_20medianGraphFal,'EVIgrass_20medianGraphFal' )

//--------------------------------------------//Add map layer of median grass GPP
var grassEVI_20_medMapWin = eviGrass20win.median();
Map.addLayer(grassEVI_20_medMapWin, colorizedVis, 'grassEVI_20_medMapWin');

var grassEVI_20_medMapSpr = eviGrass20spr.median();
Map.addLayer(grassEVI_20_medMapSpr, colorizedVis, 'grassEVI_20_medMapSpr');

var grassEVI_20_medMapSum = eviGrass20sum.median();
Map.addLayer(grassEVI_20_medMapSum, colorizedVis, 'grassEVI_20_medMapSum');

var grassEVI_20_medMapFal = eviGrass20fal.median();
Map.addLayer(grassEVI_20_medMapFal, colorizedVis, 'grassEVI_20_medMapFal');

//----------------------------------------------//Prints one median value for each season
var grassEVI_20_medValWin = grassEVI_20_medMapWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_20_medValWin,'grassEVI_20_medValWin');

var grassEVI_20_medValSpr = grassEVI_20_medMapSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_20_medValSpr,'grassEVI_20_medValSpr');

var grassEVI_20_medValSum = grassEVI_20_medMapSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_20_medValSum,'grassEVI_20_medValSum');

var grassEVI_20_medValFal = grassEVI_20_medMapFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassEVI_20_medValFal,'grassEVI_20_medValFal');

// //------------------------------------------------------------------//Export images
Export.image.toDrive({
  image: grassEVI_20_medMapWin,
  description: 'grassEVIwin20',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_20_medMapSpr,
  description: 'grassEVIspr20',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_20_medMapSum,
  description: 'grassEVIsum20',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassEVI_20_medMapFal,
  description: 'grassEVIfal20',
  scale: 30,
  region:Cimarron,
});



/////////////////
///////////////////////////////
/////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////












//// Define study area
var Cimarron = ee.FeatureCollection(table)
    .filter("COUNTY_NAM == 'CIMARRON'")
    .geometry();
Map.addLayer(Cimarron)
Map.centerObject(Cimarron);


////--------------------------------------------------Extract GPP data from grasslands (2005)
var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2005
var cdl2005 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-01-01', '2006-12-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2005') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass05 = cdl2005.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass05geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass05geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass05win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2005-01-01', '2005-04-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

var gppGrass05spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2005-04-01', '2005-07-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

var gppGrass05sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2005-07-01', '2005-10-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

var gppGrass05fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2005-10-01', '2006-01-01'))
                .filterBounds(grass05geo)
                .map(function(img) {return img.clip(grass05geo)});

//Select GPP from dataset
var grass05gppWin = gppGrass05win.select('GPP')
var grass05gppSpr = gppGrass05spr.select('GPP')
var grass05gppSum = gppGrass05sum.select('GPP')
var grass05gppFal = gppGrass05fal.select('GPP')
//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP05medWin = grass05gppWin.median();
Map.addLayer(grassGPP10medWin, gppVis, 'grassGPP10medWin');

var grassGPP05medSpr = grass05gppSpr.median();
Map.addLayer(grassGPP10medSpr, gppVis, 'grassGPP10medSpr');

var grassGPP05medSum = grass05gppSum.median();
Map.addLayer(grassGPP10medSum, gppVis, 'grassGPP10medSum');

var grassGPP05medFal = grass05gppFal.median();
Map.addLayer(grassGPP10medFal, gppVis, 'grassGPP10medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2005_medValWin = grassGPP05medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2005_medValWin,'grassGPP_2005_medValWin');

var grassGPP_2005_medValSpr = grassGPP05medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2005_medValSpr,'grassGPP_2005_medValSpr');

var grassGPP_2005_medValSum = grassGPP05medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2005_medValSum,'grassGPP_2005_medValSum');

var grassGPP_2005_medValFal = grassGPP05medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2005_medValFal,'grassGPP_2005_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2005
var GPPgrass05medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass05win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass05gpp',  //property of roi to display in map
})
print(GPPgrass05medWin,'GPPgrass05medWin' )

var GPPgrass05medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass05spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass05gpp',  //property of roi to display in map
})
print(GPPgrass05medSpr,'GPPgrass05medSpr' )

var GPPgrass05medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass05sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass05gpp',  //property of roi to display in map
})
print(GPPgrass05medSum,'GPPgrass05medSum' )

var GPPgrass05medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass05fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass05gpp',  //property of roi to display in map
})
print(GPPgrass05medFal,'GPPgrass05medFal' )

////------------------------------------------Export images
Export.image.toDrive({
  image: grassGPP05medWin,
  description: 'grassGPP05medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP05medSpr,
  description: 'grassGPP05medSpr',
  scale: 30,
  region:Cimarron,

});

Export.image.toDrive({
  image: grassGPP05medSum,
  description: 'grassGPP05medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP05medFal,
  description: 'grassGPP05medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2006)
var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2006
var cdl2006 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-01-01', '2006-12-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2006') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass06 = cdl2006.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass06geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass06geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass06win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2006-01-01', '2006-04-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

var gppGrass06spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2006-04-01', '2006-07-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

var gppGrass06sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2006-07-01', '2006-10-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

var gppGrass06fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2006-10-01', '2007-01-01'))
                .filterBounds(grass06geo)
                .map(function(img) {return img.clip(grass06geo)});

//Select GPP from dataset
var grass06gppWin = gppGrass06win.select('GPP')
var grass06gppSpr = gppGrass06spr.select('GPP')
var grass06gppSum = gppGrass06sum.select('GPP')
var grass06gppFal = gppGrass06fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP06medWin = grass06gppWin.median();
Map.addLayer(grassGPP10medWin, gppVis, 'grassGPP10medWin');

var grassGPP06medSpr = grass06gppSpr.median();
Map.addLayer(grassGPP10medSpr, gppVis, 'grassGPP10medSpr');

var grassGPP06medSum = grass06gppSum.median();
Map.addLayer(grassGPP10medSum, gppVis, 'grassGPP10medSum');

var grassGPP06medFal = grass06gppFal.median();
Map.addLayer(grassGPP10medFal, gppVis, 'grassGPP10medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2006_medValWin = grassGPP06medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2006_medValWin,'grassGPP_2006_medValWin');

var grassGPP_2006_medValSpr = grassGPP06medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2006_medValSpr,'grassGPP_2006_medValSpr');

var grassGPP_2006_medValSum = grassGPP06medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2006_medValSum,'grassGPP_2006_medValSum');

var grassGPP_2006_medValFal = grassGPP06medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2006_medValFal,'grassGPP_2006_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2006
var GPPgrass06medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass06win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass06gpp',  //property of roi to display in map
})
print(GPPgrass06medWin,'GPPgrass06medWin' )

var GPPgrass06medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass06spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass06gpp',  //property of roi to display in map
})
print(GPPgrass06medSpr,'GPPgrass06medSpr' )

var GPPgrass06medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass06sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass06gpp',  //property of roi to display in map
})
print(GPPgrass06medSum,'GPPgrass06medSum' )

var GPPgrass06medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass06fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass06gpp',  //property of roi to display in map
})
print(GPPgrass06medFal,'GPPgrass06medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP06medWin,
  description: 'grassGPP06medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP06medSpr,
  description: 'grassGPP06medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP06medSum,
  description: 'grassGPP06medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP06medFal,
  description: 'grassGPP06medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2007)
var cdl= ee.Image('USDA/NASS/CDL/2006').select('cropland').clip(Cimarron)

// Create grassland mask
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2007
var cdl2007 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2006-01-01', '2006-12-31'))// Get 2006 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2007') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass07 = cdl2007.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass07geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass07geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass07win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2007-01-01', '2007-04-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

var gppGrass07spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2007-04-01', '2007-07-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

var gppGrass07sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2007-07-01', '2007-10-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

var gppGrass07fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2007-10-01', '2008-01-01'))
                .filterBounds(grass07geo)
                .map(function(img) {return img.clip(grass07geo)});

//Select GPP from dataset
var grass07gppWin = gppGrass07win.select('GPP')
var grass07gppSpr = gppGrass07spr.select('GPP')
var grass07gppSum = gppGrass07sum.select('GPP')
var grass07gppFal = gppGrass07fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP07medWin = grass07gppWin.median();
Map.addLayer(grassGPP10medWin, gppVis, 'grassGPP10medWin');

var grassGPP07medSpr = grass07gppSpr.median();
Map.addLayer(grassGPP10medSpr, gppVis, 'grassGPP10medSpr');

var grassGPP07medSum = grass07gppSum.median();
Map.addLayer(grassGPP10medSum, gppVis, 'grassGPP10medSum');

var grassGPP07medFal = grass07gppFal.median();
Map.addLayer(grassGPP10medFal, gppVis, 'grassGPP10medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2007_medValWin = grassGPP07medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2007_medValWin,'grassGPP_2007_medValWin');

var grassGPP_2007_medValSpr = grassGPP07medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2007_medValSpr,'grassGPP_2007_medValSpr');

var grassGPP_2007_medValSum = grassGPP07medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2007_medValSum,'grassGPP_2007_medValSum');

var grassGPP_2007_medValFal = grassGPP07medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2007_medValFal,'grassGPP_2007_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2007
var GPPgrass07medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass07win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass07gpp',  //property of roi to display in map
})
print(GPPgrass07medWin,'GPPgrass07medWin' )

var GPPgrass07medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass07spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass07gpp',  //property of roi to display in map
})
print(GPPgrass07medSpr,'GPPgrass07medSpr' )

var GPPgrass07medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass07sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass07gpp',  //property of roi to display in map
})
print(GPPgrass07medSum,'GPPgrass07medSum' )

var GPPgrass07medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass07fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass07gpp',  //property of roi to display in map
})
print(GPPgrass07medFal,'GPPgrass07medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP07medWin,
  description: 'grassGPP07medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP07medSpr,
  description: 'grassGPP07medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP07medSum,
  description: 'grassGPP07medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP07medFal,
  description: 'grassGPP07medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2008)
var cdl= ee.Image('USDA/NASS/CDL/2008').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2008
var cdl2008 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2008-01-01', '2008-12-31'))// Get 2008 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2008') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass08 = cdl2008.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass08geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass08geo)
//-------------------------------------------------------// GPP seasonal calcs
var gppGrass08win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2008-01-01', '2008-04-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});
var gppGrass08spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2008-04-01', '2008-07-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});
var gppGrass08sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2008-07-01', '2008-10-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});
var gppGrass08fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2008-10-01', '2009-01-01'))
                .filterBounds(grass08geo)
                .map(function(img) {return img.clip(grass08geo)});

//Select GPP from dataset
var grass08gppWin = gppGrass08win.select('GPP')
var grass08gppSpr = gppGrass08spr.select('GPP')
var grass08gppSum = gppGrass08sum.select('GPP')
var grass08gppFal = gppGrass08fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP08medWin = grass08gppWin.median();
Map.addLayer(grassGPP10medWin, gppVis, 'grassGPP10medWin');

var grassGPP08medSpr = grass08gppSpr.median();
Map.addLayer(grassGPP10medSpr, gppVis, 'grassGPP10medSpr');

var grassGPP08medSum = grass08gppSum.median();
Map.addLayer(grassGPP10medSum, gppVis, 'grassGPP10medSum');

var grassGPP08medFal = grass08gppFal.median();
Map.addLayer(grassGPP10medFal, gppVis, 'grassGPP10medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2008_medValWin = grassGPP08medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2008_medValWin,'grassGPP_2008_medValWin');

var grassGPP_2008_medValSpr = grassGPP08medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2008_medValSpr,'grassGPP_2008_medValSpr');

var grassGPP_2008_medValSum = grassGPP08medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2008_medValSum,'grassGPP_2008_medValSum');

var grassGPP_2008_medValFal = grassGPP08medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2008_medValFal,'grassGPP_2008_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2008
var GPPgrass08medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass08win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass08gpp',  //property of roi to display in map
})
print(GPPgrass08medWin,'GPPgrass08medWin' )

var GPPgrass08medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass08spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass08gpp',  //property of roi to display in map
})
print(GPPgrass08medSpr,'GPPgrass08medSpr' )

var GPPgrass08medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass08sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass08gpp',  //property of roi to display in map
})
print(GPPgrass08medSum,'GPPgrass08medSum' )

var GPPgrass08medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass08fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass08gpp',  //property of roi to display in map
})
print(GPPgrass08medFal,'GPPgrass08medFal' )

////--------------------------------Export images
Export.image.toDrive({
  image: grassGPP08medWin,
  description: 'grassGPP08medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP08medSpr,
  description: 'grassGPP08medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP08medSum,
  description: 'grassGPP08medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP08medFal,
  description: 'grassGPP08medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2009)
var cdl= ee.Image('USDA/NASS/CDL/2009').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2009
var cdl2009 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2009-01-01', '2009-12-31'))// Get 2009 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2009') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass09 = cdl2009.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass09geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass09geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass09win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2009-01-01', '2009-04-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});

var gppGrass09spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2009-04-01', '2009-07-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});

var gppGrass09sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2009-07-01', '2009-10-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});

var gppGrass09fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2009-10-01', '2010-01-01'))
                .filterBounds(grass09geo)
                .map(function(img) {return img.clip(grass09geo)});

//Select GPP from dataset
var grass09gppWin = gppGrass09win.select('GPP')
var grass09gppSpr = gppGrass09spr.select('GPP')
var grass09gppSum = gppGrass09sum.select('GPP')
var grass09gppFal = gppGrass09fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP09medWin = grass09gppWin.median();
Map.addLayer(grassGPP10medWin, gppVis, 'grassGPP10medWin');

var grassGPP09medSpr = grass09gppSpr.median();
Map.addLayer(grassGPP10medSpr, gppVis, 'grassGPP10medSpr');

var grassGPP09medSum = grass09gppSum.median();
Map.addLayer(grassGPP10medSum, gppVis, 'grassGPP10medSum');

var grassGPP09medFal = grass09gppFal.median();
Map.addLayer(grassGPP10medFal, gppVis, 'grassGPP10medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2009_medValWin = grassGPP09medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2009_medValWin,'grassGPP_2009_medValWin');

var grassGPP_2009_medValSpr = grassGPP09medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2009_medValSpr,'grassGPP_2009_medValSpr');

var grassGPP_2009_medValSum = grassGPP09medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2009_medValSum,'grassGPP_2009_medValSum');

var grassGPP_2009_medValFal = grassGPP09medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2009_medValFal,'grassGPP_2009_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2009
var GPPgrass09medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass09win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass09gpp',  //property of roi to display in map
})
print(GPPgrass09medWin,'GPPgrass09medWin' )

var GPPgrass09medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass09spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass09gpp',  //property of roi to display in map
})
print(GPPgrass09medSpr,'GPPgrass09medSpr' )

var GPPgrass09medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass09sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass09gpp',  //property of roi to display in map
})
print(GPPgrass09medSum,'GPPgrass09medSum' )

var GPPgrass09medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass09fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass09gpp',  //property of roi to display in map
})
print(GPPgrass09medFal,'GPPgrass09medFal' )

////----------------------------Export images
Export.image.toDrive({
  image: grassGPP09medWin,
  description: 'grassGPP09medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP09medSpr,
  description: 'grassGPP09medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP09medSum,
  description: 'grassGPP09medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP09medFal,
  description: 'grassGPP09medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2010)
var cdl= ee.Image('USDA/NASS/CDL/2010').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2010
var cdl2010 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2010-01-01', '2010-12-31'))// Get 2010 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2010') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass10 = cdl2010.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass10geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass10geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass10win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2010-01-01', '2010-04-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});

var gppGrass10spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2010-04-01', '2010-07-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});

var gppGrass10sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2010-07-01', '2010-10-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});

var gppGrass10fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2010-10-01', '2011-01-01'))
                .filterBounds(grass10geo)
                .map(function(img) {return img.clip(grass10geo)});

//Select GPP from dataset
var grass10gppWin = gppGrass10win.select('GPP')
var grass10gppSpr = gppGrass10spr.select('GPP')
var grass10gppSum = gppGrass10sum.select('GPP')
var grass10gppFal = gppGrass10fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP10medWin = grass10gppWin.median();
Map.addLayer(grassGPP10medWin, gppVis, 'grassGPP10medWin');

var grassGPP10medSpr = grass10gppSpr.median();
Map.addLayer(grassGPP10medSpr, gppVis, 'grassGPP10medSpr');

var grassGPP10medSum = grass10gppSum.median();
Map.addLayer(grassGPP10medSum, gppVis, 'grassGPP10medSum');

var grassGPP10medFal = grass10gppFal.median();
Map.addLayer(grassGPP10medFal, gppVis, 'grassGPP10medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2010_medValWin = grassGPP10medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2010_medValWin,'grassGPP_2010_medValWin');

var grassGPP_2010_medValSpr = grassGPP10medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2010_medValSpr,'grassGPP_2010_medValSpr');

var grassGPP_2010_medValSum = grassGPP10medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2010_medValSum,'grassGPP_2010_medValSum');

var grassGPP_2010_medValFal = grassGPP10medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2010_medValFal,'grassGPP_2010_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2010
var GPPgrass10medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass10win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass10gpp',  //property of roi to display in map
})
print(GPPgrass10medWin,'GPPgrass10medWin' )

var GPPgrass10medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass10spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass10gpp',  //property of roi to display in map
})
print(GPPgrass10medSpr,'GPPgrass10medSpr' )

var GPPgrass10medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass10sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass10gpp',  //property of roi to display in map
})
print(GPPgrass10medSum,'GPPgrass10medSum' )

var GPPgrass10medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass10fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass10gpp',  //property of roi to display in map
})
print(GPPgrass10medFal,'GPPgrass10medFal' )

////---------------------------Export images
Export.image.toDrive({
  image: grassGPP10medWin,
  description: 'grassGPP10medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP10medSpr,
  description: 'grassGPP10medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP10medSum,
  description: 'grassGPP10medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP10medFal,
  description: 'grassGPP10medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2011)
var cdl= ee.Image('USDA/NASS/CDL/2011').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2011
var cdl2011 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2011-01-01', '2011-12-31'))// Get 2011 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2011') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass11 = cdl2011.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass11geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass11geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass11win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2011-01-01', '2011-04-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});

var gppGrass11spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2011-04-01', '2011-07-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});

var gppGrass11sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2011-07-01', '2011-10-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});

var gppGrass11fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2011-10-01', '2012-01-01'))
                .filterBounds(grass11geo)
                .map(function(img) {return img.clip(grass11geo)});
//Select GPP from dataset
var grass11gppWin = gppGrass11win.select('GPP')
var grass11gppSpr = gppGrass11spr.select('GPP')
var grass11gppSum = gppGrass11sum.select('GPP')
var grass11gppFal = gppGrass11fal.select('GPP')
//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP11medWin = grass11gppWin.median();
Map.addLayer(grassGPP11medWin, gppVis, 'grassGPP11medWin');

var grassGPP11medSpr = grass11gppSpr.median();
Map.addLayer(grassGPP11medSpr, gppVis, 'grassGPP11medSpr');

var grassGPP11medSum = grass11gppSum.median();
Map.addLayer(grassGPP11medSum, gppVis, 'grassGPP11medSum');

var grassGPP11medFal = grass11gppFal.median();
Map.addLayer(grassGPP11medFal, gppVis, 'grassGPP11medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2011_medValWin = grassGPP11medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2011_medValWin,'grassGPP_2011_medValWin');

var grassGPP_2011_medValSpr = grassGPP11medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2011_medValSpr,'grassGPP_2011_medValSpr');

var grassGPP_2011_medValSum = grassGPP11medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2011_medValSum,'grassGPP_2011_medValSum');

var grassGPP_2011_medValFal = grassGPP11medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2011_medValFal,'grassGPP_2011_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2011
var GPPgrass11medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass11win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass11gpp',  //property of roi to display in map
})
print(GPPgrass11medWin,'GPPgrass11medWin' )

var GPPgrass11medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass11spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass11gpp',  //property of roi to display in map
})
print(GPPgrass11medSpr,'GPPgrass11medSpr' )

var GPPgrass11medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass11sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass11gpp',  //property of roi to display in map
})
print(GPPgrass11medSum,'GPPgrass11medSum' )

var GPPgrass11medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass11fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass11gpp',  //property of roi to display in map
})
print(GPPgrass11medFal,'GPPgrass11medFal' )

////----------------------Export images
Export.image.toDrive({
  image: grassGPP11medWin,
  description: 'grassGPP11medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP11medSpr,
  description: 'grassGPP11medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP11medSum,
  description: 'grassGPP11medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP11medFal,
  description: 'grassGPP11medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2012)
var cdl= ee.Image('USDA/NASS/CDL/2012').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2012
var cdl2012 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2012-01-01', '2012-12-31'))// Get 2012 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2012') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass12 = cdl2012.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass12geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass12geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass12win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2012-01-01', '2012-04-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

var gppGrass12spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2012-04-01', '2012-07-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

var gppGrass12sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2012-07-01', '2012-10-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

var gppGrass12fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2012-10-01', '2013-01-01'))
                .filterBounds(grass12geo)
                .map(function(img) {return img.clip(grass12geo)});

//Select GPP from dataset
var grass12gppWin = gppGrass12win.select('GPP')
var grass12gppSpr = gppGrass12spr.select('GPP')
var grass12gppSum = gppGrass12sum.select('GPP')
var grass12gppFal = gppGrass12fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP12medWin = grass12gppWin.median();
Map.addLayer(grassGPP12medWin, gppVis, 'grassGPP12medWin');

var grassGPP12medSpr = grass12gppSpr.median();
Map.addLayer(grassGPP12medSpr, gppVis, 'grassGPP12medSpr');

var grassGPP12medSum = grass12gppSum.median();
Map.addLayer(grassGPP12medSum, gppVis, 'grassGPP12medSum');

var grassGPP12medFal = grass12gppFal.median();
Map.addLayer(grassGPP12medFal, gppVis, 'grassGPP12medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2012_medValWin = grassGPP12medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2012_medValWin,'grassGPP_2012_medValWin');

var grassGPP_2012_medValSpr = grassGPP12medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2012_medValSpr,'grassGPP_2012_medValSpr');

var grassGPP_2012_medValSum = grassGPP12medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2012_medValSum,'grassGPP_2012_medValSum');

var grassGPP_2012_medValFal = grassGPP12medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2012_medValFal,'grassGPP_2012_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2012
var GPPgrass12medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass12win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass12gpp',  //property of roi to display in map
})
print(GPPgrass12medWin,'GPPgrass12medWin' )

var GPPgrass12medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass12spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass12gpp',  //property of roi to display in map
})
print(GPPgrass12medSpr,'GPPgrass12medSpr' )

var GPPgrass12medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass12sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass12gpp',  //property of roi to display in map
})
print(GPPgrass12medSum,'GPPgrass12medSum' )

var GPPgrass12medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass12fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass12gpp',  //property of roi to display in map
})
print(GPPgrass12medFal,'GPPgrass12medFal' )

////--------------------Export images
Export.image.toDrive({
  image: grassGPP12medWin,
  description: 'grassGPP12medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP12medSpr,
  description: 'grassGPP12medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP12medSum,
  description: 'grassGPP12medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP12medFal,
  description: 'grassGPP12medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2013)
var cdl= ee.Image('USDA/NASS/CDL/2013').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2013
var cdl2013 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2013-01-01', '2013-12-31'))// Get 2013 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2013') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass13 = cdl2013.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass13geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass13geo)
//-------------------------------------------------------// GPP seasonal calcs
var gppGrass13win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2013-01-01', '2013-04-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

var gppGrass13spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2013-04-01', '2013-07-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

var gppGrass13sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2013-07-01', '2013-10-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

var gppGrass13fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2013-10-01', '2014-01-01'))
                .filterBounds(grass13geo)
                .map(function(img) {return img.clip(grass13geo)});

//Select GPP from dataset
var grass13gppWin = gppGrass13win.select('GPP')
var grass13gppSpr = gppGrass13spr.select('GPP')
var grass13gppSum = gppGrass13sum.select('GPP')
var grass13gppFal = gppGrass13fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP13medWin = grass13gppWin.median();
Map.addLayer(grassGPP13medWin, gppVis, 'grassGPP13medWin');

var grassGPP13medSpr = grass13gppSpr.median();
Map.addLayer(grassGPP13medSpr, gppVis, 'grassGPP13medSpr');

var grassGPP13medSum = grass13gppSum.median();
Map.addLayer(grassGPP13medSum, gppVis, 'grassGPP13medSum');

var grassGPP13medFal = grass13gppFal.median();
Map.addLayer(grassGPP13medFal, gppVis, 'grassGPP13medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2013_medValWin = grassGPP13medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2013_medValWin,'grassGPP_2013_medValWin');

var grassGPP_2013_medValSpr = grassGPP13medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2013_medValSpr,'grassGPP_2013_medValSpr');

var grassGPP_2013_medValSum = grassGPP13medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2013_medValSum,'grassGPP_2013_medValSum');

var grassGPP_2013_medValFal = grassGPP13medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2013_medValFal,'grassGPP_2013_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2013
var GPPgrass13medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass13win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass13gpp',  //property of roi to display in map
})
print(GPPgrass13medWin,'GPPgrass13medWin' )

var GPPgrass13medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass13spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass13gpp',  //property of roi to display in map
})
print(GPPgrass13medSpr,'GPPgrass13medSpr' )

var GPPgrass13medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass13sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass13gpp',  //property of roi to display in map
})
print(GPPgrass13medSum,'GPPgrass13medSum' )

var GPPgrass13medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass13fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass13gpp',  //property of roi to display in map
})
print(GPPgrass13medFal,'GPPgrass13medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP13medWin,
  description: 'grassGPP13medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP13medSpr,
  description: 'grassGPP13medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP13medSum,
  description: 'grassGPP13medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP13medFal,
  description: 'grassGPP13medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2014)
var cdl= ee.Image('USDA/NASS/CDL/2014').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2014
var cdl2014 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2014-01-01', '2014-12-31'))// Get 2014 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2014') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass14 = cdl2014.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass14geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass14geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass14win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2014-01-01', '2014-04-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

var gppGrass14spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2014-04-01', '2014-07-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

var gppGrass14sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2014-07-01', '2014-10-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

var gppGrass14fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2014-10-01', '2015-01-01'))
                .filterBounds(grass14geo)
                .map(function(img) {return img.clip(grass14geo)});

//Select GPP from dataset
var grass14gppWin = gppGrass14win.select('GPP')
var grass14gppSpr = gppGrass14spr.select('GPP')
var grass14gppSum = gppGrass14sum.select('GPP')
var grass14gppFal = gppGrass14fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP14medWin = grass14gppWin.median();
Map.addLayer(grassGPP14medWin, gppVis, 'grassGPP14medWin');

var grassGPP14medSpr = grass14gppSpr.median();
Map.addLayer(grassGPP14medSpr, gppVis, 'grassGPP14medSpr');

var grassGPP14medSum = grass14gppSum.median();
Map.addLayer(grassGPP14medSum, gppVis, 'grassGPP14medSum');

var grassGPP14medFal = grass14gppFal.median();
Map.addLayer(grassGPP14medFal, gppVis, 'grassGPP14medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2014_medValWin = grassGPP14medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2014_medValWin,'grassGPP_2014_medValWin');

var grassGPP_2014_medValSpr = grassGPP14medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2014_medValSpr,'grassGPP_2014_medValSpr');

var grassGPP_2014_medValSum = grassGPP14medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2014_medValSum,'grassGPP_2014_medValSum');

var grassGPP_2014_medValFal = grassGPP14medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2014_medValFal,'grassGPP_2014_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2014
var GPPgrass14medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass14win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass14gpp',  //property of roi to display in map
})
print(GPPgrass14medWin,'GPPgrass14medWin' )

var GPPgrass14medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass14spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass14gpp',  //property of roi to display in map
})
print(GPPgrass14medSpr,'GPPgrass14medSpr' )

var GPPgrass14medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass14sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass14gpp',  //property of roi to display in map
})
print(GPPgrass14medSum,'GPPgrass14medSum' )

var GPPgrass14medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass14fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass14gpp',  //property of roi to display in map
})
print(GPPgrass14medFal,'GPPgrass14medFal' )

////--------------------Export images
Export.image.toDrive({
  image: grassGPP14medWin,
  description: 'grassGPP14medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP14medSpr,
  description: 'grassGPP14medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP14medSum,
  description: 'grassGPP14medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP14medFal,
  description: 'grassGPP14medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2015)
var cdl= ee.Image('USDA/NASS/CDL/2015').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2015
var cdl2015 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2015-01-01', '2015-12-31'))// Get 2015 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2015') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass15 = cdl2015.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass15geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass15geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass15win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2015-01-01', '2015-04-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

var gppGrass15spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2015-04-01', '2015-07-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

var gppGrass15sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2015-07-01', '2015-10-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

var gppGrass15fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2015-10-01', '2016-01-01'))
                .filterBounds(grass15geo)
                .map(function(img) {return img.clip(grass15geo)});

//Select GPP from dataset
var grass15gppWin = gppGrass15win.select('GPP')
var grass15gppSpr = gppGrass15spr.select('GPP')
var grass15gppSum = gppGrass15sum.select('GPP')
var grass15gppFal = gppGrass15fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP15medWin = grass15gppWin.median();
Map.addLayer(grassGPP15medWin, gppVis, 'grassGPP15medWin');

var grassGPP15medSpr = grass15gppSpr.median();
Map.addLayer(grassGPP15medSpr, gppVis, 'grassGPP15medSpr');

var grassGPP15medSum = grass15gppSum.median();
Map.addLayer(grassGPP15medSum, gppVis, 'grassGPP15medSum');

var grassGPP15medFal = grass15gppFal.median();
Map.addLayer(grassGPP15medFal, gppVis, 'grassGPP15medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2015_medValWin = grassGPP15medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2015_medValWin,'grassGPP_2015_medValWin');

var grassGPP_2015_medValSpr = grassGPP15medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2015_medValSpr,'grassGPP_2015_medValSpr');

var grassGPP_2015_medValSum = grassGPP15medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2015_medValSum,'grassGPP_2015_medValSum');

var grassGPP_2015_medValFal = grassGPP15medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2015_medValFal,'grassGPP_2015_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2015
var GPPgrass15medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass15win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass15gpp',  //property of roi to display in map
})
print(GPPgrass15medWin,'GPPgrass15medWin' )

var GPPgrass15medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass15spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass15gpp',  //property of roi to display in map
})
print(GPPgrass15medSpr,'GPPgrass15medSpr' )

var GPPgrass15medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass15sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass15gpp',  //property of roi to display in map
})
print(GPPgrass15medSum,'GPPgrass15medSum' )

var GPPgrass15medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass15fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass15gpp',  //property of roi to display in map
})
print(GPPgrass15medFal,'GPPgrass15medFal' )

////---------------------Export images
Export.image.toDrive({
  image: grassGPP15medWin,
  description: 'grassGPP15medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP15medSpr,
  description: 'grassGPP15medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP15medSum,
  description: 'grassGPP15medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP15medFal,
  description: 'grassGPP15medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2016)
var cdl= ee.Image('USDA/NASS/CDL/2016').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2016
var cdl2016 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2016-01-01', '2016-12-31'))// Get 2016 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2016') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass16 = cdl2016.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// Create geometry from "masked"
var grass16geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass16geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass16win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2016-01-01', '2016-04-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

var gppGrass16spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2016-04-01', '2016-07-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

var gppGrass16sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2016-07-01', '2016-10-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

var gppGrass16fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2016-10-01', '2017-01-01'))
                .filterBounds(grass16geo)
                .map(function(img) {return img.clip(grass16geo)});

//Select GPP from dataset
var grass16gppWin = gppGrass16win.select('GPP')
var grass16gppSpr = gppGrass16spr.select('GPP')
var grass16gppSum = gppGrass16sum.select('GPP')
var grass16gppFal = gppGrass16fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP16medWin = grass16gppWin.median();
Map.addLayer(grassGPP16medWin, gppVis, 'grassGPP16medWin');
var grassGPP16medSpr = grass16gppSpr.median();
Map.addLayer(grassGPP16medSpr, gppVis, 'grassGPP16medSpr');
var grassGPP16medSum = grass16gppSum.median();
Map.addLayer(grassGPP16medSum, gppVis, 'grassGPP16medSum');
var grassGPP16medFal = grass16gppFal.median();
Map.addLayer(grassGPP16medFal, gppVis, 'grassGPP16medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2016_medValWin = grassGPP16medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2016_medValWin,'grassGPP_2016_medValWin');

var grassGPP_2016_medValSpr = grassGPP16medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2016_medValSpr,'grassGPP_2016_medValSpr');

var grassGPP_2016_medValSum = grassGPP16medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2016_medValSum,'grassGPP_2016_medValSum');

var grassGPP_2016_medValFal = grassGPP16medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2016_medValFal,'grassGPP_2016_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2016
var GPPgrass16medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass16win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass16gpp',  //property of roi to display in map
})
print(GPPgrass16medWin,'GPPgrass16medWin' )

var GPPgrass16medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass16spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass16gpp',  //property of roi to display in map
})
print(GPPgrass16medSpr,'GPPgrass16medSpr' )

var GPPgrass16medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass16sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass16gpp',  //property of roi to display in map
})
print(GPPgrass16medSum,'GPPgrass16medSum' )

var GPPgrass16medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass16fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass16gpp',  //property of roi to display in map
})
print(GPPgrass16medFal,'GPPgrass16medFal' )

////--------------------------Export images
Export.image.toDrive({
  image: grassGPP16medWin,
  description: 'grassGPP16medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP16medSpr,
  description: 'grassGPP16medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP16medSum,
  description: 'grassGPP16medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP16medFal,
  description: 'grassGPP16medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2017)
var cdl= ee.Image('USDA/NASS/CDL/2017').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2017
var cdl2017 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2017-01-01', '2017-12-31'))// Get 2017 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2017') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass17 = cdl2017.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass17geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass17geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass17win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2017-01-01', '2017-04-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

var gppGrass17spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2017-04-01', '2017-07-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

var gppGrass17sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2017-07-01', '2017-10-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

var gppGrass17fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2017-10-01', '2018-01-01'))
                .filterBounds(grass17geo)
                .map(function(img) {return img.clip(grass17geo)});

//Select GPP from dataset
var grass17gppWin = gppGrass17win.select('GPP')
var grass17gppSpr = gppGrass17spr.select('GPP')
var grass17gppSum = gppGrass17sum.select('GPP')
var grass17gppFal = gppGrass17fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP17medWin = grass17gppWin.median();
Map.addLayer(grassGPP17medWin, gppVis, 'grassGPP17medWin');

var grassGPP17medSpr = grass17gppSpr.median();
Map.addLayer(grassGPP17medSpr, gppVis, 'grassGPP17medSpr');

var grassGPP17medSum = grass17gppSum.median();
Map.addLayer(grassGPP17medSum, gppVis, 'grassGPP17medSum');

var grassGPP17medFal = grass17gppFal.median();
Map.addLayer(grassGPP17medFal, gppVis, 'grassGPP17medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2017_medValWin = grassGPP17medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2017_medValWin,'grassGPP_2017_medValWin');

var grassGPP_2017_medValSpr = grassGPP17medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2017_medValSpr,'grassGPP_2017_medValSpr');

var grassGPP_2017_medValSum = grassGPP17medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2017_medValSum,'grassGPP_2017_medValSum');

var grassGPP_2017_medValFal = grassGPP17medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2017_medValFal,'grassGPP_2017_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2017
var GPPgrass17medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass17win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass17gpp',  //property of roi to display in map
})
print(GPPgrass17medWin,'GPPgrass17medWin' )

var GPPgrass17medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass17spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass17gpp',  //property of roi to display in map
})
print(GPPgrass17medSpr,'GPPgrass17medSpr' )

var GPPgrass17medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass17sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass17gpp',  //property of roi to display in map
})
print(GPPgrass17medSum,'GPPgrass17medSum' )

var GPPgrass17medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass17fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass17gpp',  //property of roi to display in map
})
print(GPPgrass17medFal,'GPPgrass17medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP17medWin,
  description: 'grassGPP17medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP17medSpr,
  description: 'grassGPP17medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP17medSum,
  description: 'grassGPP17medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP17medFal,
  description: 'grassGPP17medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2018)
var cdl= ee.Image('USDA/NASS/CDL/2018').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2018
var cdl2018 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2018-01-01', '2018-12-31'))// Get 2018 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2018') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass18 = cdl2018.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass18geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass18geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass18win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2018-01-01', '2018-04-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

var gppGrass18spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2018-04-01', '2018-07-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

var gppGrass18sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2018-07-01', '2018-10-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

var gppGrass18fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2018-10-01', '2019-01-01'))
                .filterBounds(grass18geo)
                .map(function(img) {return img.clip(grass18geo)});

//Select GPP from dataset
var grass18gppWin = gppGrass18win.select('GPP')
var grass18gppSpr = gppGrass18spr.select('GPP')
var grass18gppSum = gppGrass18sum.select('GPP')
var grass18gppFal = gppGrass18fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP18medWin = grass18gppWin.median();
Map.addLayer(grassGPP17medWin, gppVis, 'grassGPP17medWin');

var grassGPP18medSpr = grass18gppSpr.median();
Map.addLayer(grassGPP17medSpr, gppVis, 'grassGPP17medSpr');

var grassGPP18medSum = grass18gppSum.median();
Map.addLayer(grassGPP17medSum, gppVis, 'grassGPP17medSum');

var grassGPP18medFal = grass18gppFal.median();
Map.addLayer(grassGPP17medFal, gppVis, 'grassGPP17medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2018_medValWin = grassGPP18medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2018_medValWin,'grassGPP_2018_medValWin');

var grassGPP_2018_medValSpr = grassGPP18medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2018_medValSpr,'grassGPP_2018_medValSpr');

var grassGPP_2018_medValSum = grassGPP18medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2018_medValSum,'grassGPP_2018_medValSum');

var grassGPP_2018_medValFal = grassGPP18medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2018_medValFal,'grassGPP_2018_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2018
var GPPgrass18medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass18win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass18gpp',  //property of roi to display in map
})
print(GPPgrass18medWin,'GPPgrass18medWin' )

var GPPgrass18medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass18spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass18gpp',  //property of roi to display in map
})
print(GPPgrass18medSpr,'GPPgrass18medSpr' )

var GPPgrass18medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass18sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass18gpp',  //property of roi to display in map
})
print(GPPgrass18medSum,'GPPgrass18medSum' )

var GPPgrass18medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass18fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass18gpp',  //property of roi to display in map
})
print(GPPgrass18medFal,'GPPgrass18medFal' )

////----------------------Export images
Export.image.toDrive({
  image: grassGPP18medWin,
  description: 'grassGPP18medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP18medSpr,
  description: 'grassGPP18medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP18medSum,
  description: 'grassGPP18medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP18medFal,
  description: 'grassGPP18medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2019)
var cdl= ee.Image('USDA/NASS/CDL/2019').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2019
var cdl2019 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2019-01-01', '2019-12-31'))// Get 2019 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2019') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass19 = cdl2019.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

// // Create geometry from "masked"
var grass19geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass19geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass19win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2019-01-01', '2019-04-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

var gppGrass19spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2019-04-01', '2019-07-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

var gppGrass19sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2019-07-01', '2019-10-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

var gppGrass19fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2019-10-01', '2020-01-01'))
                .filterBounds(grass19geo)
                .map(function(img) {return img.clip(grass19geo)});

//Select GPP from dataset
var grass19gppWin = gppGrass19win.select('GPP')
var grass19gppSpr = gppGrass19spr.select('GPP')
var grass19gppSum = gppGrass19sum.select('GPP')
var grass19gppFal = gppGrass19fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP19medWin = grass19gppWin.median();
Map.addLayer(grassGPP17medWin, gppVis, 'grassGPP17medWin');

var grassGPP19medSpr = grass19gppSpr.median();
Map.addLayer(grassGPP17medSpr, gppVis, 'grassGPP17medSpr');

var grassGPP19medSum = grass19gppSum.median();
Map.addLayer(grassGPP17medSum, gppVis, 'grassGPP17medSum');

var grassGPP19medFal = grass19gppFal.median();
Map.addLayer(grassGPP17medFal, gppVis, 'grassGPP17medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_2019_medValWin = grassGPP19medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2019_medValWin,'grassGPP_2019_medValWin');

var grassGPP_2019_medValSpr = grassGPP19medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2019_medValSpr,'grassGPP_2019_medValSpr');

var grassGPP_2019_medValSum = grassGPP19medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2019_medValSum,'grassGPP_2019_medValSum');

var grassGPP_2019_medValFal = grassGPP19medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_2019_medValFal,'grassGPP_2019_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2019
var GPPgrass19medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass19win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass19gpp',  //property of roi to display in map
})
print(GPPgrass19medWin,'GPPgrass19medWin' )

var GPPgrass19medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass19spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass19gpp',  //property of roi to display in map
})
print(GPPgrass19medSpr,'GPPgrass19medSpr' )

var GPPgrass19medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass19sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass19gpp',  //property of roi to display in map
})
print(GPPgrass19medSum,'GPPgrass19medSum' )

var GPPgrass19medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass19fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass19gpp',  //property of roi to display in map
})
print(GPPgrass19medFal,'GPPgrass19medFal' )


////-----------------------Export images
Export.image.toDrive({
  image: grassGPP19medWin,
  description: 'grassGPP19medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP19medSpr,
  description: 'grassGPP19medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP19medSum,
  description: 'grassGPP19medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP19medFal,
  description: 'grassGPP19medFal',
  scale: 30,
  region:Cimarron,
});

////--------------------------------------------------Extract GPP data from grasslands (2020)
var cdl= ee.Image('USDA/NASS/CDL/2020').select('cropland').clip(Cimarron)

//// Create mask to isolate grasslands
var masked = ee.Image(cdl)
  .updateMask((cdl.eq(176)) )

// CDL data 2020
var cdl2020 = ee.ImageCollection('USDA/NASS/CDL')
                          .filter(ee.Filter.date('2020-01-01', '2020-12-31'))// Get 2020 Data
                          .select(0) // Get Landcover band integer
                          .aside(print,'cdl2020') //Returns ImageCollection with 1 element
                          .map(function(image) { return image.clip(Cimarron); });

//Remap to grass only
var cdlGrass20 = cdl2020.map(function(image){
  return image.remap([176, 176, 176, 176, 176, 176],
                      [176, 176, 176, 176, 176, 176]);
});

//
// Create geometry from "masked"
var grass20geo = masked.reduceToVectors({
  geometry: Cimarron,
  scale: 56,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'vectors',
});
print(grass20geo)

//-------------------------------------------------------// GPP seasonal calcs
var gppGrass20win = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2020-01-01', '2020-04-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

var gppGrass20spr = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2020-04-01', '2020-07-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

var gppGrass20sum = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2020-07-01', '2020-10-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

var gppGrass20fal = ee.ImageCollection('UMT/NTSG/v2/LANDSAT/GPP')
                .filter(ee.Filter.date('2020-10-01', '2021-01-01'))
                .filterBounds(grass20geo)
                .map(function(img) {return img.clip(grass20geo)});

//Select GPP from dataset
var grass20gppWin = gppGrass20win.select('GPP')
var grass20gppSpr = gppGrass20spr.select('GPP')
var grass20gppSum = gppGrass20sum.select('GPP')
var grass20gppFal = gppGrass20fal.select('GPP')

//------------------------------------------------------------------//Add map layer of median grass GPP
var grassGPP20medWin = grass20gppWin.median();
Map.addLayer(grassGPP20medWin, gppVis, 'grassGPP20medWin');

var grassGPP20medSpr = grass20gppSpr.median();
Map.addLayer(grassGPP20medSpr, gppVis, 'grassGPP20medSpr');

var grassGPP20medSum = grass20gppSum.median();
Map.addLayer(grassGPP20medSum, gppVis, 'grassGPP20medSum');

var grassGPP20medFal = grass20gppFal.median();
Map.addLayer(grassGPP20medFal, gppVis, 'grassGPP20medFal');

//---------------------------------------------------------------------//Prints one median value for entire year
var grassGPP_20_medValWin = grassGPP20medWin.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_20_medValWin,'grassGPP_20_medValWin');

var grassGPP_20_medValSpr = grassGPP20medSpr.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_20_medValSpr,'grassGPP_20_medValSpr');

var grassGPP_20_medValSum = grassGPP20medSum.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_20_medValSum,'grassGPP_20_medValSum');

var grassGPP_20_medValFal = grassGPP20medFal.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: Cimarron,
  scale: 30,
  maxPixels: 1e9
});
print(grassGPP_20_medValFal,'grassGPP_20_medValFal');

//-----------------------------------------------------------------//Make plot of grassland gpp data 2020
var GPPgrass20medWin = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass20win,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass20gpp',  //property of roi to display in map
})
print(GPPgrass20medWin,'GPPgrass20medWin' )

var GPPgrass20medSpr = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass20spr,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass20gpp',  //property of roi to display in map
})
print(GPPgrass20medSpr,'GPPgrass20medSpr' )

var GPPgrass20medSum = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass20sum,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass20gpp',  //property of roi to display in map
})
print(GPPgrass20medSum,'GPPgrass20medSum' )

var GPPgrass20medFal = ui.Chart.image.seriesByRegion({
  imageCollection: gppGrass20fal,
  regions: Cimarron,
  reducer: ee.Reducer.median(),
  scale: 30, //spatial scale of product
  seriesProperty: 'grass20gpp',  //property of roi to display in map
})
print(GPPgrass20medFal,'GPPgrass20medFal' )

////-----------------------Export images
Export.image.toDrive({
  image: grassGPP20medWin,
  description: 'grassGPP20medWin',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP20medSpr,
  description: 'grassGPP20medSpr',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP20medSum,
  description: 'grassGPP20medSum',
  scale: 30,
  region:Cimarron,
});

Export.image.toDrive({
  image: grassGPP20medFal,
  description: 'grassGPP20medFal',
  scale: 30,
  region:Cimarron,
});

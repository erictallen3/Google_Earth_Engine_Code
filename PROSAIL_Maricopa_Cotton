######NOTE:
The majority of this was written by Jean-Baptiste Féret and has been adapted for a specific USDA-ARS cotton study









##Input variables
##The function PRO4SAIL runs PROSAIL for individual canopy reflectances and expects the following input variables.

##SAILversion: the version of SAIL to be used. The default version is 4SAIL. 4SAIL2 can also be called from
##the same function with additional parameters. Both versions include the following input parameters:
 
##  Spec_Sensor: dataframe including the refractive index and specific absorption coefficients,
##defined for a given spectral range (max range: 400 nm - 2500 nm).
##Simulation and inversion on different spectral domains can be
##performed by adapting the information in SpecPROSPECT,
##which is loaded by default when calling the package prospect.
#--------print(SpecPROSPECT)
##The biochemical and biophysical input variables of PROSPECT, including N, CHL, CAR, ANT, BROWN, EWT,
#LMA, PROT, CBC, alpha.
##If no value, their default value is set.

##Note that a unique value (or no value) is expected for each of the leaf constituents when running 4SAIL.
##4SAIL2 allows introduction of two distinct sets of leaf optical properties.
##In the original version, one type is dedicated to ‘Green leaves’,
##and the other type is dedicated to ‘Brown leaves’. User can decide either to simulate both types of leaf
##optical properties using PROSPECT, or to directly define these leaf optical properties
##with the BrownVegetation input parameter, defined as follows

##BrownVegetation is a parameter specific to 4SAIL2. It should be a list including Reflectance and
##Transmittance, with the spectral sampling corresponding to the sampling defined in Spec_Sensor

##TypeLidf: two leaf inclination distribution functions are implemented here.

##Define TypeLidf=1 if you want to use the original LIDF introduced by Verhoef (1998).
##if TypeLidf=1 then LIDFa controls the average leaf slope and LIDFb controls the distribution’s bimodality
##Define TypeLidf=2 if you want to use the ellipsoidal distribution function characterized by the average leaf
##inclination angle in degree if TypeLidf=2 then LIDFa controls the average leaf angle
##lai: leaf area angle

##q: hot spot parameter

##tts: sun zenith angle (0 degrees = sun at the vertical of surface)

##tto: observer zenith angle (0 degrees = nadir observation)

##psi: azimuth between sun and observer (in degrees)

##rsoil: soil reflectance

##Additionally, 4SAIL2 also includes the following parameters

##fraction_brown: the Fraction of LAI corresponding to brown leaf area, between 0 and 1

##diss: Layer dissociation factor

##Cv: vertical crown cover percentage (= % ground area covered with crowns as seen from nadir direction)

##Zeta: Tree shape factor (= ratio of crown diameter to crown height)

##BrownVegetation: optional input parameter. If user defined brown vegetation such as experimental
##measurements is available. If PROSPECT is used to define both green and brown leaves, leave BrownVegetation
##undefined, or set to NULL

##Output variables
##PRO4SAIL returns a list containing :
 
##rddt: bi-hemispherical reflectance factor
##rsdt: directional-hemispherical reflectance factor for solar incident flux
##rdot: hemispherical-directional reflectance factor in viewing direction
##rsot: bi-directional reflectance factor
##fcover: Fraction of green Vegetation Cover (= 1 - beam transmittance in the target-view path)
##abs_dir: canopy absorptance for direct solar incident flux
##abs_hem: canopy absorptance for hemispherical diffuse incident flux
##rsdstar: contribution of direct solar incident flux to albedo
##rddstar: contribution of hemispherical diffuse incident flux to albedo



install.packages("rlang")
library(prosail)
library(sf)
library(rlang)


# define input variables for PROSPECT.
# refer to prospect tutorial for default values corresponding to undefined PROSPECT variables
CHL <- 40; CAR <- 8; ANT <- 0.0; EWT <- 0.01; LMA <- 0.009; N = 1.5;

# define input variables for SAIL.
lai <- 5;       # LAI
q <- 0.5;      # Hot spot parameter
TypeLidf <- 2;  LIDFa <- 30;    LIDFb <- NULL;  # leaf inclination distribution function parameters
tts <- 30;      tto <- 10;      psi <- 90;      # geometry of acquisition
rsoil <- SpecSOIL$Dry_Soil  

# soil reflectance (SpecSOIL includes Dry_Soil and Wet_Soil properties)
# run PROSAIL with 4SAIL
Ref_4SAIL <- PRO4SAIL(Spec_Sensor = SpecPROSPECT,
                      CHL = CHL, CAR = CAR, ANT = ANT, EWT = EWT, LMA = LMA, N = N,
                      TypeLidf = TypeLidf,LIDFa = LIDFa,LIDFb = LIDFb,lai = lai,
                      q = q,tts = tts,tto = tto,psi = psi,rsoil = rsoil)
print(Ref_4SAIL)

# run PROSAIL with 4SAIL2
fraction_brown <- 0.5
diss <- 0.5
Cv <- 1
Zeta <- 1
# define a few leaf chemical constituents corresponding to green and brown leaves
CHL2 <- c(40,5)
CAR2 <- c(8,5)
ANT2 <- c(0,1)
EWT2 <- c(0.01,0.005)
LMA2 <- c(0.009,0.008)
N2 <- c(1.5,2)

Ref_4SAIL2 <- PRO4SAIL(SAILversion = '4SAIL2',Spec_Sensor = SpecPROSPECT,
                       CHL = CHL2, CAR = CAR2, ANT = ANT2, EWT = EWT2, LMA = LMA2, N = N2,
                       TypeLidf = TypeLidf,LIDFa = LIDFa,LIDFb = LIDFb,lai = lai,
                       q = q,tts = tts,tto = tto,psi = psi,rsoil = rsoil,
                       fraction_brown = fraction_brown, diss = diss, Cv = Cv, Zeta = Zeta)

##

# Ref_4SAIL is the variable obtained when running PRO4SAIL as in the previous illustration
# SpecATM corresponds to the direct and diffuse radiation solar spectra
BRF_4SAIL <- Compute_BRF(rdot = Ref_4SAIL$rdot,
                         rsot = Ref_4SAIL$rsot,
                         tts = tts,
                         SpecATM_Sensor = SpecATM)

print(BRF_4SAIL)
plot(BRF_4SAIL, ylim = c(0, 0.9), type="l", lwd = 0.001, xlab = 'PROSAIL_4SAIL_HTSPT_0.5')

#BRF_4SAIL2 <- Compute_BRF(rdot = Ref_4SAIL2$rdot,
#                          rsot = Ref_4SAIL2$rsot,
#                          tts = tts,
#                          SpecATM_Sensor = SpecATM)
#print(BRF_4SAIL2)
#plot(BRF_4SAIL2, ylim = c(0, 0.9), type="l", lwd = 0.001, xlab = 'PROSAIL_4SAIL2')


##

# Ref_4SAIL is the variable obtained when running PRO4SAIL as in the previous illustration
# SpecATM corresponds to the direct and diffuse radiation solar spectra
fAPAR_4SAIL <- Compute_fAPAR(abs_dir = Ref_4SAIL$abs_dir,
                             abs_hem = Ref_4SAIL$abs_hem,
                             tts = tts,
                             SpecATM_Sensor = SpecATM)
print(fAPAR_4SAIL)

#fAPAR_4SAIL2 <- Compute_fAPAR(abs_dir = Ref_4SAIL2$abs_dir,
#                              abs_hem = Ref_4SAIL2$abs_hem,
#                              tts = tts,
#                              SpecATM_Sensor = SpecATM)
#print(fAPAR_4SAIL2)


##

# Ref_4SAIL is the variable obtained when running PRO4SAIL as in the previous illustration
# SpecATM corresponds to the direct and diffuse radiation solar spectra
albedo_4SAIL <- Compute_albedo(rsdstar = Ref_4SAIL$rsdstar,
                               rddstar = Ref_4SAIL$rddstar,
                               tts = tts,
                               SpecATM_Sensor = SpecATM)
print(albedo_4SAIL)

#albedo_4SAIL2 <- Compute_albedo(rsdstar = Ref_4SAIL2$rsdstar,
#                                rddstar = Ref_4SAIL2$rddstar,
#                                tts = tts,
#                                SpecATM_Sensor = SpecATM)

#print(albedo_4SAIL2)


##

# get the spectral response for Sentinel-2A
SensorName = 'Sentinel_2A'
# if interested in a different satellite, please use Path_SensorResponse to
# locate the SRF file expected to be named 'SensorName_Spectral_Response.csv' (separator = tabulations)
SRF <- GetRadiometry(SensorName,Path_SensorResponse = NULL)

print(SRF)


##

# WL is a vector giving central wavelength for each band in nanometer #(need to provide)
# FWHM is a vector giving FWHM for each band in nanometer (need to provide)
SRF <- Compute_SRF(WL,FWHM)

##

# apply sensor characteristics to simulated reflectance
wvl <- SpecPROSPECT$lambda
BRF_4SAIL_S2 <- applySensorCharacteristics(wvl = wvl,
                                           SRF = SRF,
                                           InRefl = BRF_4SAIL)
print(BRF_4SAIL_S2)

#BRF_4SAIL2_S2 <- applySensorCharacteristics(wvl = wvl,
#                                            SRF = SRF,
#                                            InRefl = BRF_4SAIL2)
#print(BRF_4SAIL2_S2)

